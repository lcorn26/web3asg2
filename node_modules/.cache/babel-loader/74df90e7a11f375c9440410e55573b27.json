{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable default-case */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { SelectContext } from \"rc-tree-select/es/Context\";\nimport Column from './Column';\nimport { isLeaf, restoreCompatibleValue } from '../util';\nimport CascaderContext from '../context';\nimport useSearchResult from '../hooks/useSearchResult';\nvar RefOptionList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _optionColumns$, _optionColumns$$optio, _classNames;\n\n  var prefixCls = props.prefixCls,\n      options = props.options,\n      onSelect = props.onSelect,\n      multiple = props.multiple,\n      open = props.open,\n      flattenOptions = props.flattenOptions,\n      searchValue = props.searchValue,\n      onToggleOpen = props.onToggleOpen,\n      notFoundContent = props.notFoundContent,\n      direction = props.direction;\n  var containerRef = React.useRef();\n  var rtl = direction === 'rtl';\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys;\n\n  var _React$useContext2 = React.useContext(CascaderContext),\n      changeOnSelect = _React$useContext2.changeOnSelect,\n      expandTrigger = _React$useContext2.expandTrigger,\n      fieldNames = _React$useContext2.fieldNames,\n      loadData = _React$useContext2.loadData,\n      search = _React$useContext2.search,\n      dropdownPrefixCls = _React$useContext2.dropdownPrefixCls;\n\n  var mergedPrefixCls = dropdownPrefixCls || prefixCls; // ========================= loadData =========================\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loadingKeys = _React$useState2[0],\n      setLoadingKeys = _React$useState2[1];\n\n  var internalLoadData = function internalLoadData(pathValue) {\n    // Do not load when search\n    if (!loadData || searchValue) {\n      return;\n    }\n\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === pathValue;\n    });\n\n    if (entity && !isLeaf(entity.data.node)) {\n      var _restoreCompatibleVal = restoreCompatibleValue(entity, fieldNames),\n          optionList = _restoreCompatibleVal.options;\n\n      var rawOptionList = optionList.map(function (opt) {\n        return opt.node;\n      });\n      setLoadingKeys(function (keys) {\n        return [].concat(_toConsumableArray(keys), [entity.key]);\n      });\n      loadData(rawOptionList);\n    }\n  }; // zombieJ: This is bad. We should make this same as `rc-tree` to use Promise instead.\n\n\n  React.useEffect(function () {\n    if (loadingKeys.length) {\n      loadingKeys.forEach(function (loadingKey) {\n        var option = flattenOptions.find(function (opt) {\n          return opt.value === loadingKey;\n        });\n\n        if (!option || option.data.children || option.data.isLeaf === true) {\n          setLoadingKeys(function (keys) {\n            return keys.filter(function (key) {\n              return key !== loadingKey;\n            });\n          });\n        }\n      });\n    }\n  }, [flattenOptions, loadingKeys]); // ========================== Values ==========================\n\n  var checkedSet = React.useMemo(function () {\n    return new Set(checkedKeys);\n  }, [checkedKeys]);\n  var halfCheckedSet = React.useMemo(function () {\n    return new Set(halfCheckedKeys);\n  }, [halfCheckedKeys]); // =========================== Open ===========================\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      openFinalValue = _React$useState4[0],\n      setOpenFinalValue = _React$useState4[1];\n\n  var mergedOpenPath = React.useMemo(function () {\n    if (searchValue) {\n      return openFinalValue !== undefined && openFinalValue !== null ? [openFinalValue] : [];\n    }\n\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === openFinalValue;\n    });\n\n    if (entity) {\n      var _restoreCompatibleVal2 = restoreCompatibleValue(entity, fieldNames),\n          path = _restoreCompatibleVal2.path;\n\n      return path;\n    }\n\n    return [];\n  }, [openFinalValue, flattenOptions, searchValue]);\n  React.useEffect(function () {\n    if (open) {\n      var nextOpenPath = null;\n\n      if (!multiple && checkedKeys.length) {\n        var entity = flattenOptions.find(function (flattenOption) {\n          return flattenOption.data.value === checkedKeys[0];\n        });\n\n        if (entity) {\n          nextOpenPath = entity.data.value;\n        }\n      }\n\n      setOpenFinalValue(nextOpenPath);\n    }\n  }, [open]); // =========================== Path ===========================\n\n  var onPathOpen = function onPathOpen(index, pathValue) {\n    setOpenFinalValue(pathValue); // Trigger loadData\n\n    internalLoadData(pathValue);\n  };\n\n  var onPathSelect = function onPathSelect(pathValue, leaf) {\n    onSelect(pathValue, {\n      selected: !checkedSet.has(pathValue)\n    });\n\n    if (!multiple && (leaf || changeOnSelect && expandTrigger === 'hover')) {\n      onToggleOpen(false);\n    }\n  };\n\n  var getPathList = function getPathList(pathList) {\n    var currentOptions = options;\n\n    var _loop = function _loop(i) {\n      currentOptions = (currentOptions || []).find(function (option) {\n        return option.value === pathList[i];\n      }).children;\n    };\n\n    for (var i = 0; i < pathList.length; i += 1) {\n      _loop(i);\n    }\n\n    return currentOptions;\n  }; // ========================== Search ==========================\n\n\n  var searchOptions = useSearchResult(_objectSpread(_objectSpread({}, props), {}, {\n    prefixCls: mergedPrefixCls,\n    fieldNames: fieldNames,\n    changeOnSelect: changeOnSelect,\n    searchConfig: search\n  })); // ========================== Column ==========================\n\n  var optionColumns = React.useMemo(function () {\n    if (searchValue) {\n      return [{\n        options: searchOptions\n      }];\n    }\n\n    var rawOptionColumns = [];\n\n    for (var i = 0; i <= mergedOpenPath.length; i += 1) {\n      var subOptions = getPathList(mergedOpenPath.slice(0, i));\n\n      if (subOptions) {\n        rawOptionColumns.push({\n          options: subOptions\n        });\n      } else {\n        break;\n      }\n    }\n\n    return rawOptionColumns;\n  }, [searchValue, searchOptions, mergedOpenPath]); // ========================= Keyboard =========================\n\n  var getActiveOption = function getActiveOption(activeColumnIndex, offset) {\n    var _optionColumns$active;\n\n    var pathActiveValue = mergedOpenPath[activeColumnIndex];\n    var currentOptions = ((_optionColumns$active = optionColumns[activeColumnIndex]) === null || _optionColumns$active === void 0 ? void 0 : _optionColumns$active.options) || [];\n    var activeOptionIndex = currentOptions.findIndex(function (opt) {\n      return opt.value === pathActiveValue;\n    });\n    var len = currentOptions.length; // Last one is special since -1 may back 2 offset\n\n    if (offset === -1 && activeOptionIndex === -1) {\n      activeOptionIndex = len;\n    }\n\n    for (var i = 1; i <= len; i += 1) {\n      var current = (activeOptionIndex + i * offset + len) % len;\n      var option = currentOptions[current];\n\n      if (!option.disabled) {\n        return option;\n      }\n    }\n\n    return null;\n  };\n\n  var prevColumn = function prevColumn() {\n    if (mergedOpenPath.length <= 1) {\n      onToggleOpen(false);\n    }\n\n    setOpenFinalValue(mergedOpenPath[mergedOpenPath.length - 2]);\n  };\n\n  var nextColumn = function nextColumn() {\n    var nextColumnIndex = mergedOpenPath.length;\n    var nextActiveOption = getActiveOption(nextColumnIndex, 1);\n\n    if (nextActiveOption) {\n      onPathOpen(nextColumnIndex, nextActiveOption.value);\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      // scrollTo: treeRef.current?.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n            {\n              var offset = 0;\n\n              if (which === KeyCode.UP) {\n                offset = -1;\n              } else if (which === KeyCode.DOWN) {\n                offset = 1;\n              }\n\n              if (offset !== 0) {\n                var activeColumnIndex = Math.max(mergedOpenPath.length - 1, 0);\n                var nextActiveOption = getActiveOption(activeColumnIndex, offset);\n\n                if (nextActiveOption) {\n                  var _containerRef$current, _ele$scrollIntoView;\n\n                  var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-value=\\\"\".concat(nextActiveOption.value, \"\\\"]\"));\n                  ele === null || ele === void 0 ? void 0 : (_ele$scrollIntoView = ele.scrollIntoView) === null || _ele$scrollIntoView === void 0 ? void 0 : _ele$scrollIntoView.call(ele, {\n                    block: 'nearest'\n                  });\n                  onPathOpen(activeColumnIndex, nextActiveOption.value);\n                }\n              }\n\n              break;\n            }\n\n          case KeyCode.LEFT:\n            {\n              if (rtl) {\n                nextColumn();\n              } else {\n                prevColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              if (rtl) {\n                prevColumn();\n              } else {\n                nextColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.BACKSPACE:\n            {\n              if (!searchValue) {\n                prevColumn();\n              }\n\n              break;\n            }\n          // >>> Select\n\n          case KeyCode.ENTER:\n            {\n              var _optionColumns, _optionColumns$option;\n\n              var lastValue = mergedOpenPath[mergedOpenPath.length - 1];\n              var option = (_optionColumns = optionColumns[mergedOpenPath.length - 1]) === null || _optionColumns === void 0 ? void 0 : (_optionColumns$option = _optionColumns.options) === null || _optionColumns$option === void 0 ? void 0 : _optionColumns$option.find(function (opt) {\n                return opt.value === lastValue;\n              }); // Skip when no select\n\n              if (option) {\n                var leaf = isLeaf(option);\n\n                if (multiple || changeOnSelect || leaf) {\n                  onPathSelect(lastValue, leaf);\n                } // Close for changeOnSelect\n\n\n                if (changeOnSelect) {\n                  onToggleOpen(false);\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n\n              if (open) {\n                event.stopPropagation();\n              }\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  var columnProps = _objectSpread(_objectSpread({}, props), {}, {\n    onOpen: onPathOpen,\n    onSelect: onPathSelect,\n    onToggleOpen: onToggleOpen,\n    checkedSet: checkedSet,\n    halfCheckedSet: halfCheckedSet,\n    loadingKeys: loadingKeys\n  }); // >>>>> Empty\n\n\n  var isEmpty = !((_optionColumns$ = optionColumns[0]) === null || _optionColumns$ === void 0 ? void 0 : (_optionColumns$$optio = _optionColumns$.options) === null || _optionColumns$$optio === void 0 ? void 0 : _optionColumns$$optio.length);\n  var emptyList = [{\n    title: notFoundContent,\n    value: '__EMPTY__',\n    disabled: true,\n    node: null\n  }]; // >>>>> Columns\n\n  var mergedOptionColumns = isEmpty ? [{\n    options: emptyList\n  }] : optionColumns;\n  var columnNodes = mergedOptionColumns.map(function (col, index) {\n    return /*#__PURE__*/React.createElement(Column, _extends({\n      key: index,\n      index: index\n    }, columnProps, {\n      prefixCls: mergedPrefixCls,\n      options: col.options,\n      openKey: mergedOpenPath[index]\n    }));\n  }); // >>>>> Render\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"\".concat(mergedPrefixCls, \"-menus\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-menu-empty\"), isEmpty), _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-rtl\"), rtl), _classNames)),\n    ref: containerRef\n  }, columnNodes));\n});\nexport default RefOptionList;","map":{"version":3,"sources":["D:/Documents/School Stuff/Web 3/ASG 2/web3asg2/node_modules/rc-cascader/es/OptionList/index.js"],"names":["_defineProperty","_extends","_objectSpread","_toConsumableArray","_slicedToArray","React","classNames","KeyCode","SelectContext","Column","isLeaf","restoreCompatibleValue","CascaderContext","useSearchResult","RefOptionList","forwardRef","props","ref","_optionColumns$","_optionColumns$$optio","_classNames","prefixCls","options","onSelect","multiple","open","flattenOptions","searchValue","onToggleOpen","notFoundContent","direction","containerRef","useRef","rtl","_React$useContext","useContext","checkedKeys","halfCheckedKeys","_React$useContext2","changeOnSelect","expandTrigger","fieldNames","loadData","search","dropdownPrefixCls","mergedPrefixCls","_React$useState","useState","_React$useState2","loadingKeys","setLoadingKeys","internalLoadData","pathValue","entity","find","flattenOption","data","value","node","_restoreCompatibleVal","optionList","rawOptionList","map","opt","keys","concat","key","useEffect","length","forEach","loadingKey","option","children","filter","checkedSet","useMemo","Set","halfCheckedSet","_React$useState3","_React$useState4","openFinalValue","setOpenFinalValue","mergedOpenPath","undefined","_restoreCompatibleVal2","path","nextOpenPath","onPathOpen","index","onPathSelect","leaf","selected","has","getPathList","pathList","currentOptions","_loop","i","searchOptions","searchConfig","optionColumns","rawOptionColumns","subOptions","slice","push","getActiveOption","activeColumnIndex","offset","_optionColumns$active","pathActiveValue","activeOptionIndex","findIndex","len","current","disabled","prevColumn","nextColumn","nextColumnIndex","nextActiveOption","useImperativeHandle","onKeyDown","event","which","UP","DOWN","Math","max","_containerRef$current","_ele$scrollIntoView","ele","querySelector","scrollIntoView","call","block","LEFT","RIGHT","BACKSPACE","ENTER","_optionColumns","_optionColumns$option","lastValue","ESC","stopPropagation","onKeyUp","columnProps","onOpen","isEmpty","emptyList","title","mergedOptionColumns","columnNodes","col","createElement","openKey","Fragment","className"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/* eslint-disable default-case */\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { SelectContext } from \"rc-tree-select/es/Context\";\nimport Column from './Column';\nimport { isLeaf, restoreCompatibleValue } from '../util';\nimport CascaderContext from '../context';\nimport useSearchResult from '../hooks/useSearchResult';\nvar RefOptionList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _optionColumns$, _optionColumns$$optio, _classNames;\n\n  var prefixCls = props.prefixCls,\n      options = props.options,\n      onSelect = props.onSelect,\n      multiple = props.multiple,\n      open = props.open,\n      flattenOptions = props.flattenOptions,\n      searchValue = props.searchValue,\n      onToggleOpen = props.onToggleOpen,\n      notFoundContent = props.notFoundContent,\n      direction = props.direction;\n  var containerRef = React.useRef();\n  var rtl = direction === 'rtl';\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys;\n\n  var _React$useContext2 = React.useContext(CascaderContext),\n      changeOnSelect = _React$useContext2.changeOnSelect,\n      expandTrigger = _React$useContext2.expandTrigger,\n      fieldNames = _React$useContext2.fieldNames,\n      loadData = _React$useContext2.loadData,\n      search = _React$useContext2.search,\n      dropdownPrefixCls = _React$useContext2.dropdownPrefixCls;\n\n  var mergedPrefixCls = dropdownPrefixCls || prefixCls; // ========================= loadData =========================\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loadingKeys = _React$useState2[0],\n      setLoadingKeys = _React$useState2[1];\n\n  var internalLoadData = function internalLoadData(pathValue) {\n    // Do not load when search\n    if (!loadData || searchValue) {\n      return;\n    }\n\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === pathValue;\n    });\n\n    if (entity && !isLeaf(entity.data.node)) {\n      var _restoreCompatibleVal = restoreCompatibleValue(entity, fieldNames),\n          optionList = _restoreCompatibleVal.options;\n\n      var rawOptionList = optionList.map(function (opt) {\n        return opt.node;\n      });\n      setLoadingKeys(function (keys) {\n        return [].concat(_toConsumableArray(keys), [entity.key]);\n      });\n      loadData(rawOptionList);\n    }\n  }; // zombieJ: This is bad. We should make this same as `rc-tree` to use Promise instead.\n\n\n  React.useEffect(function () {\n    if (loadingKeys.length) {\n      loadingKeys.forEach(function (loadingKey) {\n        var option = flattenOptions.find(function (opt) {\n          return opt.value === loadingKey;\n        });\n\n        if (!option || option.data.children || option.data.isLeaf === true) {\n          setLoadingKeys(function (keys) {\n            return keys.filter(function (key) {\n              return key !== loadingKey;\n            });\n          });\n        }\n      });\n    }\n  }, [flattenOptions, loadingKeys]); // ========================== Values ==========================\n\n  var checkedSet = React.useMemo(function () {\n    return new Set(checkedKeys);\n  }, [checkedKeys]);\n  var halfCheckedSet = React.useMemo(function () {\n    return new Set(halfCheckedKeys);\n  }, [halfCheckedKeys]); // =========================== Open ===========================\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      openFinalValue = _React$useState4[0],\n      setOpenFinalValue = _React$useState4[1];\n\n  var mergedOpenPath = React.useMemo(function () {\n    if (searchValue) {\n      return openFinalValue !== undefined && openFinalValue !== null ? [openFinalValue] : [];\n    }\n\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === openFinalValue;\n    });\n\n    if (entity) {\n      var _restoreCompatibleVal2 = restoreCompatibleValue(entity, fieldNames),\n          path = _restoreCompatibleVal2.path;\n\n      return path;\n    }\n\n    return [];\n  }, [openFinalValue, flattenOptions, searchValue]);\n  React.useEffect(function () {\n    if (open) {\n      var nextOpenPath = null;\n\n      if (!multiple && checkedKeys.length) {\n        var entity = flattenOptions.find(function (flattenOption) {\n          return flattenOption.data.value === checkedKeys[0];\n        });\n\n        if (entity) {\n          nextOpenPath = entity.data.value;\n        }\n      }\n\n      setOpenFinalValue(nextOpenPath);\n    }\n  }, [open]); // =========================== Path ===========================\n\n  var onPathOpen = function onPathOpen(index, pathValue) {\n    setOpenFinalValue(pathValue); // Trigger loadData\n\n    internalLoadData(pathValue);\n  };\n\n  var onPathSelect = function onPathSelect(pathValue, leaf) {\n    onSelect(pathValue, {\n      selected: !checkedSet.has(pathValue)\n    });\n\n    if (!multiple && (leaf || changeOnSelect && expandTrigger === 'hover')) {\n      onToggleOpen(false);\n    }\n  };\n\n  var getPathList = function getPathList(pathList) {\n    var currentOptions = options;\n\n    var _loop = function _loop(i) {\n      currentOptions = (currentOptions || []).find(function (option) {\n        return option.value === pathList[i];\n      }).children;\n    };\n\n    for (var i = 0; i < pathList.length; i += 1) {\n      _loop(i);\n    }\n\n    return currentOptions;\n  }; // ========================== Search ==========================\n\n\n  var searchOptions = useSearchResult(_objectSpread(_objectSpread({}, props), {}, {\n    prefixCls: mergedPrefixCls,\n    fieldNames: fieldNames,\n    changeOnSelect: changeOnSelect,\n    searchConfig: search\n  })); // ========================== Column ==========================\n\n  var optionColumns = React.useMemo(function () {\n    if (searchValue) {\n      return [{\n        options: searchOptions\n      }];\n    }\n\n    var rawOptionColumns = [];\n\n    for (var i = 0; i <= mergedOpenPath.length; i += 1) {\n      var subOptions = getPathList(mergedOpenPath.slice(0, i));\n\n      if (subOptions) {\n        rawOptionColumns.push({\n          options: subOptions\n        });\n      } else {\n        break;\n      }\n    }\n\n    return rawOptionColumns;\n  }, [searchValue, searchOptions, mergedOpenPath]); // ========================= Keyboard =========================\n\n  var getActiveOption = function getActiveOption(activeColumnIndex, offset) {\n    var _optionColumns$active;\n\n    var pathActiveValue = mergedOpenPath[activeColumnIndex];\n    var currentOptions = ((_optionColumns$active = optionColumns[activeColumnIndex]) === null || _optionColumns$active === void 0 ? void 0 : _optionColumns$active.options) || [];\n    var activeOptionIndex = currentOptions.findIndex(function (opt) {\n      return opt.value === pathActiveValue;\n    });\n    var len = currentOptions.length; // Last one is special since -1 may back 2 offset\n\n    if (offset === -1 && activeOptionIndex === -1) {\n      activeOptionIndex = len;\n    }\n\n    for (var i = 1; i <= len; i += 1) {\n      var current = (activeOptionIndex + i * offset + len) % len;\n      var option = currentOptions[current];\n\n      if (!option.disabled) {\n        return option;\n      }\n    }\n\n    return null;\n  };\n\n  var prevColumn = function prevColumn() {\n    if (mergedOpenPath.length <= 1) {\n      onToggleOpen(false);\n    }\n\n    setOpenFinalValue(mergedOpenPath[mergedOpenPath.length - 2]);\n  };\n\n  var nextColumn = function nextColumn() {\n    var nextColumnIndex = mergedOpenPath.length;\n    var nextActiveOption = getActiveOption(nextColumnIndex, 1);\n\n    if (nextActiveOption) {\n      onPathOpen(nextColumnIndex, nextActiveOption.value);\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      // scrollTo: treeRef.current?.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n            {\n              var offset = 0;\n\n              if (which === KeyCode.UP) {\n                offset = -1;\n              } else if (which === KeyCode.DOWN) {\n                offset = 1;\n              }\n\n              if (offset !== 0) {\n                var activeColumnIndex = Math.max(mergedOpenPath.length - 1, 0);\n                var nextActiveOption = getActiveOption(activeColumnIndex, offset);\n\n                if (nextActiveOption) {\n                  var _containerRef$current, _ele$scrollIntoView;\n\n                  var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-value=\\\"\".concat(nextActiveOption.value, \"\\\"]\"));\n                  ele === null || ele === void 0 ? void 0 : (_ele$scrollIntoView = ele.scrollIntoView) === null || _ele$scrollIntoView === void 0 ? void 0 : _ele$scrollIntoView.call(ele, {\n                    block: 'nearest'\n                  });\n                  onPathOpen(activeColumnIndex, nextActiveOption.value);\n                }\n              }\n\n              break;\n            }\n\n          case KeyCode.LEFT:\n            {\n              if (rtl) {\n                nextColumn();\n              } else {\n                prevColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              if (rtl) {\n                prevColumn();\n              } else {\n                nextColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.BACKSPACE:\n            {\n              if (!searchValue) {\n                prevColumn();\n              }\n\n              break;\n            }\n          // >>> Select\n\n          case KeyCode.ENTER:\n            {\n              var _optionColumns, _optionColumns$option;\n\n              var lastValue = mergedOpenPath[mergedOpenPath.length - 1];\n              var option = (_optionColumns = optionColumns[mergedOpenPath.length - 1]) === null || _optionColumns === void 0 ? void 0 : (_optionColumns$option = _optionColumns.options) === null || _optionColumns$option === void 0 ? void 0 : _optionColumns$option.find(function (opt) {\n                return opt.value === lastValue;\n              }); // Skip when no select\n\n              if (option) {\n                var leaf = isLeaf(option);\n\n                if (multiple || changeOnSelect || leaf) {\n                  onPathSelect(lastValue, leaf);\n                } // Close for changeOnSelect\n\n\n                if (changeOnSelect) {\n                  onToggleOpen(false);\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n\n              if (open) {\n                event.stopPropagation();\n              }\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  var columnProps = _objectSpread(_objectSpread({}, props), {}, {\n    onOpen: onPathOpen,\n    onSelect: onPathSelect,\n    onToggleOpen: onToggleOpen,\n    checkedSet: checkedSet,\n    halfCheckedSet: halfCheckedSet,\n    loadingKeys: loadingKeys\n  }); // >>>>> Empty\n\n\n  var isEmpty = !((_optionColumns$ = optionColumns[0]) === null || _optionColumns$ === void 0 ? void 0 : (_optionColumns$$optio = _optionColumns$.options) === null || _optionColumns$$optio === void 0 ? void 0 : _optionColumns$$optio.length);\n  var emptyList = [{\n    title: notFoundContent,\n    value: '__EMPTY__',\n    disabled: true,\n    node: null\n  }]; // >>>>> Columns\n\n  var mergedOptionColumns = isEmpty ? [{\n    options: emptyList\n  }] : optionColumns;\n  var columnNodes = mergedOptionColumns.map(function (col, index) {\n    return /*#__PURE__*/React.createElement(Column, _extends({\n      key: index,\n      index: index\n    }, columnProps, {\n      prefixCls: mergedPrefixCls,\n      options: col.options,\n      openKey: mergedOpenPath[index]\n    }));\n  }); // >>>>> Render\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"\".concat(mergedPrefixCls, \"-menus\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-menu-empty\"), isEmpty), _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-rtl\"), rtl), _classNames)),\n    ref: containerRef\n  }, columnNodes));\n});\nexport default RefOptionList;"]},"metadata":{},"sourceType":"module"}