{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport Tree from 'rc-tree';\nimport { SelectContext } from './Context';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(props, ref) {\n  var prefixCls = props.prefixCls,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      options = props.options,\n      flattenOptions = props.flattenOptions,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      onSelect = props.onSelect,\n      onToggleOpen = props.onToggleOpen,\n      open = props.open,\n      notFoundContent = props.notFoundContent,\n      onMouseEnter = props.onMouseEnter;\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkable = _React$useContext.checkable,\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext.onTreeExpand,\n      treeIcon = _React$useContext.treeIcon,\n      showTreeIcon = _React$useContext.showTreeIcon,\n      switcherIcon = _React$useContext.switcherIcon,\n      treeLine = _React$useContext.treeLine,\n      treeNodeFilterProp = _React$useContext.treeNodeFilterProp,\n      loadData = _React$useContext.loadData,\n      treeLoadedKeys = _React$useContext.treeLoadedKeys,\n      treeMotion = _React$useContext.treeMotion,\n      onTreeLoad = _React$useContext.onTreeLoad,\n      getEntityByKey = _React$useContext.getEntityByKey,\n      getEntityByValue = _React$useContext.getEntityByValue;\n\n  var treeRef = React.useRef();\n  var memoOptions = useMemo(function () {\n    return options;\n  }, [open, options], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  }); // ========================== Values ==========================\n\n  var valueKeys = React.useMemo(function () {\n    return checkedKeys.map(function (val) {\n      // We should keep disabled value entity here\n      var entity = getEntityByValue(val, undefined, true);\n      return entity ? entity.key : null;\n    });\n  }, [checkedKeys, getEntityByValue]);\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: valueKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [valueKeys, halfCheckedKeys, checkable]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && valueKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: valueKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, lowerSearchValue, treeExpandedKeys]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(flattenOptions.map(function (o) {\n        return o.key;\n      }));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(_, _ref) {\n    var key = _ref.node.key;\n    var entity = getEntityByKey(key, checkable ? 'checkbox' : 'select');\n\n    if (entity !== null) {\n      onSelect(entity.data.value, {\n        selected: !checkedKeys.includes(entity.data.value)\n      });\n    }\n\n    if (!multiple) {\n      onToggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = getEntityByKey(activeKey);\n  React.useImperativeHandle(ref, function () {\n    var _treeRef$current2;\n\n    return {\n      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current3;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 ? void 0 : _treeRef$current3.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              var _ref2 = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.data.node) || {},\n                  selectable = _ref2.selectable,\n                  value = _ref2.value;\n\n              if (selectable !== false) {\n                onInternalSelect(null, {\n                  node: {\n                    key: activeKey\n                  },\n                  selected: !checkedKeys.includes(value)\n                });\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoOptions.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {};\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown,\n    onMouseEnter: onMouseEnter\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.data.value), /*#__PURE__*/React.createElement(Tree, _extends({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoOptions,\n    height: height,\n    itemHeight: itemHeight,\n    virtual: virtual,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion // We handle keys by out instead tree self\n    ,\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? valueKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;","map":{"version":3,"sources":["D:/Documents/School Stuff/Web 3/ASG 2/web3asg2/node_modules/rc-tree-select/es/OptionList.js"],"names":["_extends","_toConsumableArray","_slicedToArray","React","KeyCode","useMemo","Tree","SelectContext","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","OptionList","props","ref","prefixCls","itemHeight","virtual","options","flattenOptions","multiple","searchValue","onSelect","onToggleOpen","open","notFoundContent","onMouseEnter","_React$useContext","useContext","checkable","checkedKeys","halfCheckedKeys","treeExpandedKeys","treeDefaultExpandAll","treeDefaultExpandedKeys","onTreeExpand","treeIcon","showTreeIcon","switcherIcon","treeLine","treeNodeFilterProp","loadData","treeLoadedKeys","treeMotion","onTreeLoad","getEntityByKey","getEntityByValue","treeRef","useRef","memoOptions","prev","next","valueKeys","map","val","entity","undefined","key","mergedCheckedKeys","checked","halfChecked","useEffect","length","_treeRef$current","current","scrollTo","lowerSearchValue","String","toLowerCase","filterTreeNode","treeNode","includes","_React$useState","useState","_React$useState2","expandedKeys","setExpandedKeys","_React$useState3","_React$useState4","searchExpandedKeys","setSearchExpandedKeys","mergedExpandedKeys","o","onInternalExpand","keys","onListMouseDown","event","preventDefault","onInternalSelect","_","_ref","node","data","value","selected","_React$useState5","_React$useState6","activeKey","setActiveKey","activeEntity","useImperativeHandle","_treeRef$current2","onKeyDown","_treeRef$current3","which","UP","DOWN","LEFT","RIGHT","ENTER","_ref2","selectable","ESC","onKeyUp","createElement","role","className","concat","onMouseDown","treeProps","loadedKeys","style","focusable","treeData","icon","showIcon","showLine","motion","checkStrictly","selectedKeys","defaultExpandAll","onActiveChange","onCheck","onExpand","onLoad","RefOptionList","forwardRef","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport Tree from 'rc-tree';\nimport { SelectContext } from './Context';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(props, ref) {\n  var prefixCls = props.prefixCls,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      options = props.options,\n      flattenOptions = props.flattenOptions,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      onSelect = props.onSelect,\n      onToggleOpen = props.onToggleOpen,\n      open = props.open,\n      notFoundContent = props.notFoundContent,\n      onMouseEnter = props.onMouseEnter;\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkable = _React$useContext.checkable,\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext.onTreeExpand,\n      treeIcon = _React$useContext.treeIcon,\n      showTreeIcon = _React$useContext.showTreeIcon,\n      switcherIcon = _React$useContext.switcherIcon,\n      treeLine = _React$useContext.treeLine,\n      treeNodeFilterProp = _React$useContext.treeNodeFilterProp,\n      loadData = _React$useContext.loadData,\n      treeLoadedKeys = _React$useContext.treeLoadedKeys,\n      treeMotion = _React$useContext.treeMotion,\n      onTreeLoad = _React$useContext.onTreeLoad,\n      getEntityByKey = _React$useContext.getEntityByKey,\n      getEntityByValue = _React$useContext.getEntityByValue;\n\n  var treeRef = React.useRef();\n  var memoOptions = useMemo(function () {\n    return options;\n  }, [open, options], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  }); // ========================== Values ==========================\n\n  var valueKeys = React.useMemo(function () {\n    return checkedKeys.map(function (val) {\n      // We should keep disabled value entity here\n      var entity = getEntityByValue(val, undefined, true);\n      return entity ? entity.key : null;\n    });\n  }, [checkedKeys, getEntityByValue]);\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: valueKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [valueKeys, halfCheckedKeys, checkable]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && valueKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: valueKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, lowerSearchValue, treeExpandedKeys]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(flattenOptions.map(function (o) {\n        return o.key;\n      }));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(_, _ref) {\n    var key = _ref.node.key;\n    var entity = getEntityByKey(key, checkable ? 'checkbox' : 'select');\n\n    if (entity !== null) {\n      onSelect(entity.data.value, {\n        selected: !checkedKeys.includes(entity.data.value)\n      });\n    }\n\n    if (!multiple) {\n      onToggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = getEntityByKey(activeKey);\n  React.useImperativeHandle(ref, function () {\n    var _treeRef$current2;\n\n    return {\n      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current3;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 ? void 0 : _treeRef$current3.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              var _ref2 = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.data.node) || {},\n                  selectable = _ref2.selectable,\n                  value = _ref2.value;\n\n              if (selectable !== false) {\n                onInternalSelect(null, {\n                  node: {\n                    key: activeKey\n                  },\n                  selected: !checkedKeys.includes(value)\n                });\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoOptions.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {};\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown,\n    onMouseEnter: onMouseEnter\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.data.value), /*#__PURE__*/React.createElement(Tree, _extends({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoOptions,\n    height: height,\n    itemHeight: itemHeight,\n    virtual: virtual,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion // We handle keys by out instead tree self\n    ,\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? valueKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;"]},"metadata":{},"sourceType":"module"}