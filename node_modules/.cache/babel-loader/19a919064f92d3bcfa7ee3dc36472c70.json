{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { flattenTreeData } from \"rc-tree/es/utils/treeUtil\";\nimport { fillLegacyProps } from './legacyUtil';\nexport function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\n/**\n * Fill `fieldNames` with default field names.\n *\n * @param fieldNames passed props\n * @param skipTitle Skip if no need fill `title`. This is useful since we have 2 name as same title level\n * @returns\n */\n\nexport function fillFieldNames(fieldNames) {\n  var skipTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var filledNames = {\n    value: value || 'value',\n    children: children || 'children'\n  };\n\n  if (!skipTitle || label) {\n    filledNames.label = label || 'label';\n  }\n\n  return filledNames;\n}\nexport function findValueOption(values, options) {\n  var optionMap = new Map();\n  options.forEach(function (flattenItem) {\n    var data = flattenItem.data,\n        value = flattenItem.value;\n    optionMap.set(value, data.node);\n  });\n  return values.map(function (val) {\n    return fillLegacyProps(optionMap.get(val));\n  });\n}\nexport function isValueDisabled(value, options) {\n  var option = findValueOption([value], options)[0];\n\n  if (option) {\n    return option.disabled;\n  }\n\n  return false;\n}\nexport function isCheckDisabled(node) {\n  return node.disabled || node.disableCheckbox || node.checkable === false;\n}\n\nfunction getLevel(_ref2) {\n  var parent = _ref2.parent;\n  var level = 0;\n  var current = parent;\n\n  while (current) {\n    current = current.parent;\n    level += 1;\n  }\n\n  return level;\n}\n/**\n * Before reuse `rc-tree` logic, we need to add key since TreeSelect use `value` instead of `key`.\n */\n\n\nexport function flattenOptions(options) {\n  var typedOptions = options; // Add missing key\n\n  function fillKey(list) {\n    return (list || []).map(function (node) {\n      var value = node.value,\n          key = node.key,\n          children = node.children;\n\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        key: 'key' in node ? key : value\n      });\n\n      if (children) {\n        clone.children = fillKey(children);\n      }\n\n      return clone;\n    });\n  }\n\n  var flattenList = flattenTreeData(fillKey(typedOptions), true, null);\n  var cacheMap = new Map();\n  var flattenDateNodeList = flattenList.map(function (option) {\n    var _option$parent;\n\n    var data = option.data,\n        key = option.key,\n        value = option.value;\n    var flattenNode = {\n      key: key,\n      value: value,\n      data: data,\n      level: getLevel(option),\n      parentKey: (_option$parent = option.parent) === null || _option$parent === void 0 ? void 0 : _option$parent.data.key\n    };\n    cacheMap.set(key, flattenNode);\n    return flattenNode;\n  }); // Fill parent\n\n  flattenDateNodeList.forEach(function (flattenNode) {\n    // eslint-disable-next-line no-param-reassign\n    flattenNode.parent = cacheMap.get(flattenNode.parentKey);\n  });\n  return flattenDateNodeList;\n}\n\nfunction getDefaultFilterOption(optionFilterProp) {\n  return function (searchValue, dataNode) {\n    var value = dataNode[optionFilterProp];\n    return String(value).toLowerCase().includes(String(searchValue).toLowerCase());\n  };\n}\n/** Filter options and return a new options by the search text */\n\n\nexport function filterOptions(searchValue, options, _ref3) {\n  var optionFilterProp = _ref3.optionFilterProp,\n      filterOption = _ref3.filterOption;\n\n  if (filterOption === false) {\n    return options;\n  }\n\n  var filterOptionFunc;\n\n  if (typeof filterOption === 'function') {\n    filterOptionFunc = filterOption;\n  } else {\n    filterOptionFunc = getDefaultFilterOption(optionFilterProp);\n  }\n\n  function dig(list) {\n    var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return list.map(function (dataNode) {\n      var children = dataNode.children;\n      var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n      var childList = dig(children || [], match);\n\n      if (match || childList.length) {\n        return _objectSpread(_objectSpread({}, dataNode), {}, {\n          children: childList\n        });\n      }\n\n      return null;\n    }).filter(function (node) {\n      return node;\n    });\n  }\n\n  return dig(options);\n}\nexport function getRawValueLabeled(values, prevValue, getEntityByValue, getLabelProp) {\n  var valueMap = new Map();\n  toArray(prevValue).forEach(function (item) {\n    if (item && _typeof(item) === 'object' && 'value' in item) {\n      valueMap.set(item.value, item);\n    }\n  });\n  return values.map(function (val) {\n    var item = {\n      value: val\n    };\n    var entity = getEntityByValue(val, 'select', true); // Always try to get the value by entity even it's enpty\n\n    var label = getLabelProp(entity, val);\n\n    if (label === undefined) {\n      label = val;\n    }\n\n    if (valueMap.has(val)) {\n      var labeledValue = valueMap.get(val);\n      item.label = 'label' in labeledValue ? labeledValue.label : label;\n\n      if ('halfChecked' in labeledValue) {\n        item.halfChecked = labeledValue.halfChecked;\n      }\n    } else {\n      item.label = label;\n    }\n\n    return item;\n  });\n}\nexport function addValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.add(value);\n  return Array.from(values);\n}\nexport function removeValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.delete(value);\n  return Array.from(values);\n}","map":{"version":3,"sources":["D:/Documents/School Stuff/Web 3/ASG 2/web3asg2/node_modules/rc-tree-select/es/utils/valueUtil.js"],"names":["_typeof","_objectSpread","flattenTreeData","fillLegacyProps","toArray","value","Array","isArray","undefined","fillFieldNames","fieldNames","skipTitle","arguments","length","_ref","label","children","filledNames","findValueOption","values","options","optionMap","Map","forEach","flattenItem","data","set","node","map","val","get","isValueDisabled","option","disabled","isCheckDisabled","disableCheckbox","checkable","getLevel","_ref2","parent","level","current","flattenOptions","typedOptions","fillKey","list","key","clone","flattenList","cacheMap","flattenDateNodeList","_option$parent","flattenNode","parentKey","getDefaultFilterOption","optionFilterProp","searchValue","dataNode","String","toLowerCase","includes","filterOptions","_ref3","filterOption","filterOptionFunc","dig","keepAll","match","childList","filter","getRawValueLabeled","prevValue","getEntityByValue","getLabelProp","valueMap","item","entity","has","labeledValue","halfChecked","addValue","rawValues","Set","add","from","removeValue","delete"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { flattenTreeData } from \"rc-tree/es/utils/treeUtil\";\nimport { fillLegacyProps } from './legacyUtil';\nexport function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\n/**\n * Fill `fieldNames` with default field names.\n *\n * @param fieldNames passed props\n * @param skipTitle Skip if no need fill `title`. This is useful since we have 2 name as same title level\n * @returns\n */\n\nexport function fillFieldNames(fieldNames) {\n  var skipTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var filledNames = {\n    value: value || 'value',\n    children: children || 'children'\n  };\n\n  if (!skipTitle || label) {\n    filledNames.label = label || 'label';\n  }\n\n  return filledNames;\n}\nexport function findValueOption(values, options) {\n  var optionMap = new Map();\n  options.forEach(function (flattenItem) {\n    var data = flattenItem.data,\n        value = flattenItem.value;\n    optionMap.set(value, data.node);\n  });\n  return values.map(function (val) {\n    return fillLegacyProps(optionMap.get(val));\n  });\n}\nexport function isValueDisabled(value, options) {\n  var option = findValueOption([value], options)[0];\n\n  if (option) {\n    return option.disabled;\n  }\n\n  return false;\n}\nexport function isCheckDisabled(node) {\n  return node.disabled || node.disableCheckbox || node.checkable === false;\n}\n\nfunction getLevel(_ref2) {\n  var parent = _ref2.parent;\n  var level = 0;\n  var current = parent;\n\n  while (current) {\n    current = current.parent;\n    level += 1;\n  }\n\n  return level;\n}\n/**\n * Before reuse `rc-tree` logic, we need to add key since TreeSelect use `value` instead of `key`.\n */\n\n\nexport function flattenOptions(options) {\n  var typedOptions = options; // Add missing key\n\n  function fillKey(list) {\n    return (list || []).map(function (node) {\n      var value = node.value,\n          key = node.key,\n          children = node.children;\n\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        key: 'key' in node ? key : value\n      });\n\n      if (children) {\n        clone.children = fillKey(children);\n      }\n\n      return clone;\n    });\n  }\n\n  var flattenList = flattenTreeData(fillKey(typedOptions), true, null);\n  var cacheMap = new Map();\n  var flattenDateNodeList = flattenList.map(function (option) {\n    var _option$parent;\n\n    var data = option.data,\n        key = option.key,\n        value = option.value;\n    var flattenNode = {\n      key: key,\n      value: value,\n      data: data,\n      level: getLevel(option),\n      parentKey: (_option$parent = option.parent) === null || _option$parent === void 0 ? void 0 : _option$parent.data.key\n    };\n    cacheMap.set(key, flattenNode);\n    return flattenNode;\n  }); // Fill parent\n\n  flattenDateNodeList.forEach(function (flattenNode) {\n    // eslint-disable-next-line no-param-reassign\n    flattenNode.parent = cacheMap.get(flattenNode.parentKey);\n  });\n  return flattenDateNodeList;\n}\n\nfunction getDefaultFilterOption(optionFilterProp) {\n  return function (searchValue, dataNode) {\n    var value = dataNode[optionFilterProp];\n    return String(value).toLowerCase().includes(String(searchValue).toLowerCase());\n  };\n}\n/** Filter options and return a new options by the search text */\n\n\nexport function filterOptions(searchValue, options, _ref3) {\n  var optionFilterProp = _ref3.optionFilterProp,\n      filterOption = _ref3.filterOption;\n\n  if (filterOption === false) {\n    return options;\n  }\n\n  var filterOptionFunc;\n\n  if (typeof filterOption === 'function') {\n    filterOptionFunc = filterOption;\n  } else {\n    filterOptionFunc = getDefaultFilterOption(optionFilterProp);\n  }\n\n  function dig(list) {\n    var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return list.map(function (dataNode) {\n      var children = dataNode.children;\n      var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n      var childList = dig(children || [], match);\n\n      if (match || childList.length) {\n        return _objectSpread(_objectSpread({}, dataNode), {}, {\n          children: childList\n        });\n      }\n\n      return null;\n    }).filter(function (node) {\n      return node;\n    });\n  }\n\n  return dig(options);\n}\nexport function getRawValueLabeled(values, prevValue, getEntityByValue, getLabelProp) {\n  var valueMap = new Map();\n  toArray(prevValue).forEach(function (item) {\n    if (item && _typeof(item) === 'object' && 'value' in item) {\n      valueMap.set(item.value, item);\n    }\n  });\n  return values.map(function (val) {\n    var item = {\n      value: val\n    };\n    var entity = getEntityByValue(val, 'select', true); // Always try to get the value by entity even it's enpty\n\n    var label = getLabelProp(entity, val);\n\n    if (label === undefined) {\n      label = val;\n    }\n\n    if (valueMap.has(val)) {\n      var labeledValue = valueMap.get(val);\n      item.label = 'label' in labeledValue ? labeledValue.label : label;\n\n      if ('halfChecked' in labeledValue) {\n        item.halfChecked = labeledValue.halfChecked;\n      }\n    } else {\n      item.label = label;\n    }\n\n    return item;\n  });\n}\nexport function addValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.add(value);\n  return Array.from(values);\n}\nexport function removeValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.delete(value);\n  return Array.from(values);\n}"]},"metadata":{},"sourceType":"module"}