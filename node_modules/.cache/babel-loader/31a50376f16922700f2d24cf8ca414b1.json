{"ast":null,"code":"import _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport { useState, useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport devWarning from '../../_util/devWarning'; // TODO: warning if use ajax!!!\n\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\n\nfunction getFixedType(column) {\n  return column && column.fixed;\n}\n\nfunction flattenData(data, childrenColumnName) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n\n    if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));\n    }\n  });\n  return list;\n}\n\nexport default function useSelection(rowSelection, config) {\n  var _ref = rowSelection || {},\n      preserveSelectedRowKeys = _ref.preserveSelectedRowKeys,\n      selectedRowKeys = _ref.selectedRowKeys,\n      defaultSelectedRowKeys = _ref.defaultSelectedRowKeys,\n      getCheckboxProps = _ref.getCheckboxProps,\n      onSelectionChange = _ref.onChange,\n      onSelect = _ref.onSelect,\n      onSelectAll = _ref.onSelectAll,\n      onSelectInvert = _ref.onSelectInvert,\n      onSelectNone = _ref.onSelectNone,\n      onSelectMultiple = _ref.onSelectMultiple,\n      selectionColWidth = _ref.columnWidth,\n      selectionType = _ref.type,\n      selections = _ref.selections,\n      fixed = _ref.fixed,\n      customizeRenderCell = _ref.renderCell,\n      hideSelectAll = _ref.hideSelectAll,\n      _ref$checkStrictly = _ref.checkStrictly,\n      checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;\n\n  var prefixCls = config.prefixCls,\n      data = config.data,\n      pageData = config.pageData,\n      getRecordByKey = config.getRecordByKey,\n      getRowKey = config.getRowKey,\n      expandType = config.expandType,\n      childrenColumnName = config.childrenColumnName,\n      tableLocale = config.locale,\n      expandIconColumnIndex = config.expandIconColumnIndex,\n      getPopupContainer = config.getPopupContainer; // ========================= Keys =========================\n\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || [], {\n    value: selectedRowKeys\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSelectedKeys = _useMergedState2[0],\n      setMergedSelectedKeys = _useMergedState2[1]; // ======================== Caches ========================\n\n\n  var preserveRecordsRef = React.useRef(new Map());\n  var updatePreserveRecordsCache = useCallback(function (keys) {\n    if (preserveSelectedRowKeys) {\n      var newCache = new Map(); // Keep key if mark as preserveSelectedRowKeys\n\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]); // Update cache with selectedKeys\n\n  React.useEffect(function () {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n\n  var _useMemo = useMemo(function () {\n    return checkStrictly ? {\n      keyEntities: null\n    } : convertDataToEntities(data, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName]),\n      keyEntities = _useMemo.keyEntities; // Get flatten data\n\n\n  var flattedData = useMemo(function () {\n    return flattenData(pageData, childrenColumnName);\n  }, [pageData, childrenColumnName]); // Get all checkbox props\n\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n\n  var _useMemo2 = useMemo(function () {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      derivedSelectedKeys = _useMemo3[0],\n      derivedHalfSelectedKeys = _useMemo3[1];\n\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastSelectedKey = _useState2[0],\n      setLastSelectedKey = _useState2[1]; // Reset if rowSelection reset\n\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys([]);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys) {\n    var availableKeys;\n    var records;\n    updatePreserveRecordsCache(keys);\n\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        return preserveRecordsRef.current.get(key);\n      });\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys);\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }));\n          }\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n              var checkProps = checkboxPropsMap.get(key);\n\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet[\"delete\"](key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            var keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys);\n          }\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }));\n          }\n        };\n      }\n\n      return selection;\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  var transformColumns = useCallback(function (columns) {\n    if (!rowSelection) {\n      return columns;\n    } // Support selection\n\n\n    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet[\"delete\"](key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    var title;\n\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n\n      if (mergedSelections) {\n        var menu = /*#__PURE__*/React.createElement(Menu, {\n          getPopupContainer: getPopupContainer\n        }, mergedSelections.map(function (selection, index) {\n          var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n          return /*#__PURE__*/React.createElement(Menu.Item, {\n            key: key || index,\n            onClick: function onClick() {\n              onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n            }\n          }, text);\n        }));\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          overlay: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      var allDisabledData = flattedData.map(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return _extends({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(function (_ref2) {\n        var disabled = _ref2.disabled;\n        return disabled;\n      });\n      var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      var allDisabledAndChecked = allDisabled && allDisabledData.every(function (_ref3) {\n        var checked = _ref3.checked;\n        return checked;\n      });\n      var allDisabledSomeChecked = allDisabled && allDisabledData.some(function (_ref4) {\n        var checked = _ref4.checked;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n\n    var renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, _extends({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, _extends({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref5) {\n              var nativeEvent = _ref5.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n\n                  return false;\n                });\n              }\n\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet[\"delete\"](recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                      halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet[\"delete\"](key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              setLastSelectedKey(key);\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n          node = _renderCell.node,\n          checked = _renderCell.checked;\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Columns\n\n\n    var selectionColumn = _defineProperty({\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: \"\".concat(prefixCls, \"-selection-col\")\n    });\n\n    if (expandType === 'row' && columns.length && !expandIconColumnIndex) {\n      var _columns = _toArray(columns),\n          expandColumn = _columns[0],\n          restColumns = _columns.slice(1);\n\n      var selectionFixed = fixed || getFixedType(restColumns[0]);\n\n      if (selectionFixed) {\n        expandColumn.fixed = selectionFixed;\n      }\n\n      return [expandColumn, _extends(_extends({}, selectionColumn), {\n        fixed: selectionFixed\n      })].concat(_toConsumableArray(restColumns));\n    }\n\n    return [_extends(_extends({}, selectionColumn), {\n      fixed: fixed || getFixedType(columns[0])\n    })].concat(_toConsumableArray(columns));\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}","map":{"version":3,"sources":["D:/Documents/School Stuff/Web 3/ASG 2/web3asg2/node_modules/antd/es/table/hooks/useSelection.js"],"names":["_toArray","_defineProperty","_extends","_slicedToArray","_toConsumableArray","_typeof","React","useState","useCallback","useMemo","DownOutlined","convertDataToEntities","conductCheck","arrAdd","arrDel","INTERNAL_COL_DEFINE","useMergedState","Checkbox","Dropdown","Menu","Radio","devWarning","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","getFixedType","column","fixed","flattenData","data","childrenColumnName","list","forEach","record","push","concat","useSelection","rowSelection","config","_ref","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","selectionColWidth","columnWidth","selectionType","type","selections","customizeRenderCell","renderCell","hideSelectAll","_ref$checkStrictly","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","tableLocale","locale","expandIconColumnIndex","getPopupContainer","_useMergedState","value","_useMergedState2","mergedSelectedKeys","setMergedSelectedKeys","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","_useMemo","keyEntities","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","map","index","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","_a","disabled","_useMemo2","_conductCheck","checkedKeys","halfCheckedKeys","_useMemo3","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","slice","Set","derivedHalfSelectedKeySet","_useState","_useState2","lastSelectedKey","setLastSelectedKey","setSelectedKeys","availableKeys","records","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","add","Array","from","selectNone","transformColumns","columns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","createElement","onSelectionClick","Item","onClick","className","overlay","allDisabledData","checked","_ref2","allDisabled","length","allDisabledAndChecked","_ref3","allDisabledSomeChecked","_ref4","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref5","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","_checkedKeys","nextCheckedKeys","tempKeySet","renderSelectionCell","_renderCell","selectionColumn","width","columnTitle","render","_columns","expandColumn","restColumns","selectionFixed"],"mappings":"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","sourcesContent":["import _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport { useState, useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport devWarning from '../../_util/devWarning'; // TODO: warning if use ajax!!!\n\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\n\nfunction getFixedType(column) {\n  return column && column.fixed;\n}\n\nfunction flattenData(data, childrenColumnName) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n\n    if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));\n    }\n  });\n  return list;\n}\n\nexport default function useSelection(rowSelection, config) {\n  var _ref = rowSelection || {},\n      preserveSelectedRowKeys = _ref.preserveSelectedRowKeys,\n      selectedRowKeys = _ref.selectedRowKeys,\n      defaultSelectedRowKeys = _ref.defaultSelectedRowKeys,\n      getCheckboxProps = _ref.getCheckboxProps,\n      onSelectionChange = _ref.onChange,\n      onSelect = _ref.onSelect,\n      onSelectAll = _ref.onSelectAll,\n      onSelectInvert = _ref.onSelectInvert,\n      onSelectNone = _ref.onSelectNone,\n      onSelectMultiple = _ref.onSelectMultiple,\n      selectionColWidth = _ref.columnWidth,\n      selectionType = _ref.type,\n      selections = _ref.selections,\n      fixed = _ref.fixed,\n      customizeRenderCell = _ref.renderCell,\n      hideSelectAll = _ref.hideSelectAll,\n      _ref$checkStrictly = _ref.checkStrictly,\n      checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;\n\n  var prefixCls = config.prefixCls,\n      data = config.data,\n      pageData = config.pageData,\n      getRecordByKey = config.getRecordByKey,\n      getRowKey = config.getRowKey,\n      expandType = config.expandType,\n      childrenColumnName = config.childrenColumnName,\n      tableLocale = config.locale,\n      expandIconColumnIndex = config.expandIconColumnIndex,\n      getPopupContainer = config.getPopupContainer; // ========================= Keys =========================\n\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || [], {\n    value: selectedRowKeys\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSelectedKeys = _useMergedState2[0],\n      setMergedSelectedKeys = _useMergedState2[1]; // ======================== Caches ========================\n\n\n  var preserveRecordsRef = React.useRef(new Map());\n  var updatePreserveRecordsCache = useCallback(function (keys) {\n    if (preserveSelectedRowKeys) {\n      var newCache = new Map(); // Keep key if mark as preserveSelectedRowKeys\n\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]); // Update cache with selectedKeys\n\n  React.useEffect(function () {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n\n  var _useMemo = useMemo(function () {\n    return checkStrictly ? {\n      keyEntities: null\n    } : convertDataToEntities(data, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName]),\n      keyEntities = _useMemo.keyEntities; // Get flatten data\n\n\n  var flattedData = useMemo(function () {\n    return flattenData(pageData, childrenColumnName);\n  }, [pageData, childrenColumnName]); // Get all checkbox props\n\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n\n  var _useMemo2 = useMemo(function () {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      derivedSelectedKeys = _useMemo3[0],\n      derivedHalfSelectedKeys = _useMemo3[1];\n\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastSelectedKey = _useState2[0],\n      setLastSelectedKey = _useState2[1]; // Reset if rowSelection reset\n\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys([]);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys) {\n    var availableKeys;\n    var records;\n    updatePreserveRecordsCache(keys);\n\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        return preserveRecordsRef.current.get(key);\n      });\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys);\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }));\n          }\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n              var checkProps = checkboxPropsMap.get(key);\n\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet[\"delete\"](key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            var keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys);\n          }\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }));\n          }\n        };\n      }\n\n      return selection;\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  var transformColumns = useCallback(function (columns) {\n    if (!rowSelection) {\n      return columns;\n    } // Support selection\n\n\n    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet[\"delete\"](key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    var title;\n\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n\n      if (mergedSelections) {\n        var menu = /*#__PURE__*/React.createElement(Menu, {\n          getPopupContainer: getPopupContainer\n        }, mergedSelections.map(function (selection, index) {\n          var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n          return /*#__PURE__*/React.createElement(Menu.Item, {\n            key: key || index,\n            onClick: function onClick() {\n              onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n            }\n          }, text);\n        }));\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          overlay: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      var allDisabledData = flattedData.map(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return _extends({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(function (_ref2) {\n        var disabled = _ref2.disabled;\n        return disabled;\n      });\n      var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      var allDisabledAndChecked = allDisabled && allDisabledData.every(function (_ref3) {\n        var checked = _ref3.checked;\n        return checked;\n      });\n      var allDisabledSomeChecked = allDisabled && allDisabledData.some(function (_ref4) {\n        var checked = _ref4.checked;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n\n    var renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, _extends({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, _extends({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref5) {\n              var nativeEvent = _ref5.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n\n                  return false;\n                });\n              }\n\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet[\"delete\"](recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                      halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet[\"delete\"](key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              setLastSelectedKey(key);\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n          node = _renderCell.node,\n          checked = _renderCell.checked;\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Columns\n\n\n    var selectionColumn = _defineProperty({\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: \"\".concat(prefixCls, \"-selection-col\")\n    });\n\n    if (expandType === 'row' && columns.length && !expandIconColumnIndex) {\n      var _columns = _toArray(columns),\n          expandColumn = _columns[0],\n          restColumns = _columns.slice(1);\n\n      var selectionFixed = fixed || getFixedType(restColumns[0]);\n\n      if (selectionFixed) {\n        expandColumn.fixed = selectionFixed;\n      }\n\n      return [expandColumn, _extends(_extends({}, selectionColumn), {\n        fixed: selectionFixed\n      })].concat(_toConsumableArray(restColumns));\n    }\n\n    return [_extends(_extends({}, selectionColumn), {\n      fixed: fixed || getFixedType(columns[0])\n    })].concat(_toConsumableArray(columns));\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}"]},"metadata":{},"sourceType":"module"}