{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\"; // TODO: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/treeview/treeview-2/treeview-2a.html\n// Fully accessibility support\n\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport warning from \"rc-util/es/warning\";\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport classNames from 'classnames';\nimport { TreeContext } from './contextTypes';\nimport { getDragChildrenKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr } from './util';\nimport { flattenTreeData, convertTreeToData, convertDataToEntities, warningWithoutKey, convertNodePropsToEventData, getTreeNodeProps, fillFieldNames } from './utils/treeUtil';\nimport NodeList, { MOTION_KEY, MotionEntity } from './NodeList';\nimport TreeNode from './TreeNode';\nimport { conductCheck } from './utils/conductUtil';\nimport DropIndicator from './DropIndicator';\nvar MAX_RETRY_TIMES = 10;\n\nvar Tree = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  var _super = _createSuper(Tree);\n\n  function Tree() {\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n    _this.destroyed = false;\n    _this.delayedDragEnterLogic = void 0;\n    _this.loadingRetryTimes = {};\n    _this.state = {\n      keyEntities: {},\n      indent: null,\n      selectedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      loadedKeys: [],\n      loadingKeys: [],\n      expandedKeys: [],\n      draggingNodeKey: null,\n      dragChildrenKeys: [],\n      // dropTargetKey is the key of abstract-drop-node\n      // the abstract-drop-node is the real drop node when drag and drop\n      // not the DOM drag over node\n      dropTargetKey: null,\n      dropPosition: null,\n      dropContainerKey: null,\n      dropLevelOffset: null,\n      dropTargetPos: null,\n      dropAllowed: true,\n      // the abstract-drag-over-node\n      // if mouse is on the bottom of top dom node or no the top of the bottom dom node\n      // abstract-drag-over-node is the top node\n      dragOverNodeKey: null,\n      treeData: [],\n      flattenNodes: [],\n      focused: false,\n      activeKey: null,\n      listChanging: false,\n      prevProps: null,\n      fieldNames: fillFieldNames()\n    };\n    _this.dragStartMousePosition = null;\n    _this.dragNode = void 0;\n    _this.currentMouseOverDroppableNodeKey = null;\n    _this.listRef = /*#__PURE__*/React.createRef();\n\n    _this.onNodeDragStart = function (event, node) {\n      var _this$state = _this.state,\n          expandedKeys = _this$state.expandedKeys,\n          keyEntities = _this$state.keyEntities;\n      var onDragStart = _this.props.onDragStart;\n      var eventKey = node.props.eventKey;\n      _this.dragNode = node;\n      _this.dragStartMousePosition = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      var newExpandedKeys = arrDel(expandedKeys, eventKey);\n\n      _this.setState({\n        draggingNodeKey: eventKey,\n        dragChildrenKeys: getDragChildrenKeys(eventKey, keyEntities),\n        indent: _this.listRef.current.getIndentWidth()\n      });\n\n      _this.setExpandedKeys(newExpandedKeys);\n\n      window.addEventListener('dragend', _this.onWindowDragEnd);\n\n      if (onDragStart) {\n        onDragStart({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragEnter = function (event, node) {\n      var _this$state2 = _this.state,\n          expandedKeys = _this$state2.expandedKeys,\n          keyEntities = _this$state2.keyEntities,\n          dragChildrenKeys = _this$state2.dragChildrenKeys,\n          flattenNodes = _this$state2.flattenNodes,\n          indent = _this$state2.indent;\n      var _this$props = _this.props,\n          onDragEnter = _this$props.onDragEnter,\n          onExpand = _this$props.onExpand,\n          allowDrop = _this$props.allowDrop,\n          direction = _this$props.direction;\n      var _node$props = node.props,\n          pos = _node$props.pos,\n          eventKey = _node$props.eventKey;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          dragNode = _assertThisInitialize.dragNode; // record the key of node which is latest entered, used in dragleave event.\n\n\n      if (_this.currentMouseOverDroppableNodeKey !== eventKey) {\n        _this.currentMouseOverDroppableNodeKey = eventKey;\n      }\n\n      var _calcDropPosition = calcDropPosition(event, dragNode, node, indent, _this.dragStartMousePosition, allowDrop, flattenNodes, keyEntities, expandedKeys, direction),\n          dropPosition = _calcDropPosition.dropPosition,\n          dropLevelOffset = _calcDropPosition.dropLevelOffset,\n          dropTargetKey = _calcDropPosition.dropTargetKey,\n          dropContainerKey = _calcDropPosition.dropContainerKey,\n          dropTargetPos = _calcDropPosition.dropTargetPos,\n          dropAllowed = _calcDropPosition.dropAllowed,\n          dragOverNodeKey = _calcDropPosition.dragOverNodeKey;\n\n      if (!dragNode || // don't allow drop inside its children\n      dragChildrenKeys.indexOf(dropTargetKey) !== -1 || // don't allow drop when drop is not allowed caculated by calcDropPosition\n      !dropAllowed) {\n        _this.setState({\n          dragOverNodeKey: null,\n          dropPosition: null,\n          dropLevelOffset: null,\n          dropTargetKey: null,\n          dropContainerKey: null,\n          dropTargetPos: null,\n          dropAllowed: false\n        });\n\n        return;\n      } // Side effect for delay drag\n\n\n      if (!_this.delayedDragEnterLogic) {\n        _this.delayedDragEnterLogic = {};\n      }\n\n      Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n        clearTimeout(_this.delayedDragEnterLogic[key]);\n      });\n\n      if (dragNode.props.eventKey !== node.props.eventKey) {\n        // hoist expand logic here\n        // since if logic is on the bottom\n        // it will be blocked by abstract dragover node check\n        //   => if you dragenter from top, you mouse will still be consider as in the top node\n        event.persist();\n        _this.delayedDragEnterLogic[pos] = window.setTimeout(function () {\n          if (_this.state.draggingNodeKey === null) return;\n\n          var newExpandedKeys = _toConsumableArray(expandedKeys);\n\n          var entity = keyEntities[node.props.eventKey];\n\n          if (entity && (entity.children || []).length) {\n            newExpandedKeys = arrAdd(expandedKeys, node.props.eventKey);\n          }\n\n          if (!('expandedKeys' in _this.props)) {\n            _this.setExpandedKeys(newExpandedKeys);\n          }\n\n          if (onExpand) {\n            onExpand(newExpandedKeys, {\n              node: convertNodePropsToEventData(node.props),\n              expanded: true,\n              nativeEvent: event.nativeEvent\n            });\n          }\n        }, 800);\n      } // Skip if drag node is self\n\n\n      if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {\n        _this.setState({\n          dragOverNodeKey: null,\n          dropPosition: null,\n          dropLevelOffset: null,\n          dropTargetKey: null,\n          dropContainerKey: null,\n          dropTargetPos: null,\n          dropAllowed: false\n        });\n\n        return;\n      } // Update drag over node and drag state\n\n\n      _this.setState({\n        dragOverNodeKey: dragOverNodeKey,\n        dropPosition: dropPosition,\n        dropLevelOffset: dropLevelOffset,\n        dropTargetKey: dropTargetKey,\n        dropContainerKey: dropContainerKey,\n        dropTargetPos: dropTargetPos,\n        dropAllowed: dropAllowed\n      });\n\n      if (onDragEnter) {\n        onDragEnter({\n          event: event,\n          node: convertNodePropsToEventData(node.props),\n          expandedKeys: expandedKeys\n        });\n      }\n    };\n\n    _this.onNodeDragOver = function (event, node) {\n      var _this$state3 = _this.state,\n          dragChildrenKeys = _this$state3.dragChildrenKeys,\n          flattenNodes = _this$state3.flattenNodes,\n          keyEntities = _this$state3.keyEntities,\n          expandedKeys = _this$state3.expandedKeys,\n          indent = _this$state3.indent;\n      var _this$props2 = _this.props,\n          onDragOver = _this$props2.onDragOver,\n          allowDrop = _this$props2.allowDrop,\n          direction = _this$props2.direction;\n\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n          dragNode = _assertThisInitialize2.dragNode;\n\n      var _calcDropPosition2 = calcDropPosition(event, dragNode, node, indent, _this.dragStartMousePosition, allowDrop, flattenNodes, keyEntities, expandedKeys, direction),\n          dropPosition = _calcDropPosition2.dropPosition,\n          dropLevelOffset = _calcDropPosition2.dropLevelOffset,\n          dropTargetKey = _calcDropPosition2.dropTargetKey,\n          dropContainerKey = _calcDropPosition2.dropContainerKey,\n          dropAllowed = _calcDropPosition2.dropAllowed,\n          dropTargetPos = _calcDropPosition2.dropTargetPos,\n          dragOverNodeKey = _calcDropPosition2.dragOverNodeKey;\n\n      if (!dragNode || dragChildrenKeys.indexOf(dropTargetKey) !== -1 || !dropAllowed) {\n        // don't allow drop inside its children\n        // don't allow drop when drop is not allowed caculated by calcDropPosition\n        return;\n      } // Update drag position\n\n\n      if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {\n        if (!(_this.state.dropPosition === null && _this.state.dropLevelOffset === null && _this.state.dropTargetKey === null && _this.state.dropContainerKey === null && _this.state.dropTargetPos === null && _this.state.dropAllowed === false && _this.state.dragOverNodeKey === null)) {\n          _this.setState({\n            dropPosition: null,\n            dropLevelOffset: null,\n            dropTargetKey: null,\n            dropContainerKey: null,\n            dropTargetPos: null,\n            dropAllowed: false,\n            dragOverNodeKey: null\n          });\n        }\n      } else if (!(dropPosition === _this.state.dropPosition && dropLevelOffset === _this.state.dropLevelOffset && dropTargetKey === _this.state.dropTargetKey && dropContainerKey === _this.state.dropContainerKey && dropTargetPos === _this.state.dropTargetPos && dropAllowed === _this.state.dropAllowed && dragOverNodeKey === _this.state.dragOverNodeKey)) {\n        _this.setState({\n          dropPosition: dropPosition,\n          dropLevelOffset: dropLevelOffset,\n          dropTargetKey: dropTargetKey,\n          dropContainerKey: dropContainerKey,\n          dropTargetPos: dropTargetPos,\n          dropAllowed: dropAllowed,\n          dragOverNodeKey: dragOverNodeKey\n        });\n      }\n\n      if (onDragOver) {\n        onDragOver({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragLeave = function (event, node) {\n      // if it is outside the droppable area\n      // currentMouseOverDroppableNodeKey will be updated in dragenter event when into another droppable receiver.\n      if (_this.currentMouseOverDroppableNodeKey === node.props.eventKey && !event.currentTarget.contains(event.relatedTarget)) {\n        _this.setState({\n          dropPosition: null,\n          dropLevelOffset: null,\n          dropTargetKey: null,\n          dropContainerKey: null,\n          dropTargetPos: null,\n          dropAllowed: false,\n          dragOverNodeKey: null\n        });\n\n        _this.currentMouseOverDroppableNodeKey = null;\n      }\n\n      var onDragLeave = _this.props.onDragLeave;\n\n      if (onDragLeave) {\n        onDragLeave({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onWindowDragEnd = function (event) {\n      _this.onNodeDragEnd(event, null, true);\n\n      window.removeEventListener('dragend', _this.onWindowDragEnd);\n    };\n\n    _this.onNodeDragEnd = function (event, node) {\n      var outsideTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var onDragEnd = _this.props.onDragEnd;\n\n      _this.setState({\n        dragOverNodeKey: null\n      });\n\n      _this.cleanDragState();\n\n      if (onDragEnd && !outsideTree) {\n        onDragEnd({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeDrop = function (event, node) {\n      var _this$getActiveItem;\n\n      var outsideTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var _this$state4 = _this.state,\n          dragChildrenKeys = _this$state4.dragChildrenKeys,\n          dropPosition = _this$state4.dropPosition,\n          dropTargetKey = _this$state4.dropTargetKey,\n          dropTargetPos = _this$state4.dropTargetPos,\n          dropAllowed = _this$state4.dropAllowed;\n      if (!dropAllowed) return;\n      var onDrop = _this.props.onDrop;\n\n      _this.setState({\n        dragOverNodeKey: null\n      });\n\n      _this.cleanDragState();\n\n      if (dropTargetKey === null) return;\n\n      var abstractDropNodeProps = _objectSpread(_objectSpread({}, getTreeNodeProps(dropTargetKey, _this.getTreeNodeRequiredProps())), {}, {\n        active: ((_this$getActiveItem = _this.getActiveItem()) === null || _this$getActiveItem === void 0 ? void 0 : _this$getActiveItem.data.key) === dropTargetKey,\n        data: _this.state.keyEntities[dropTargetKey].node\n      });\n\n      var dropToChild = dragChildrenKeys.indexOf(dropTargetKey) !== -1;\n      warning(!dropToChild, \"Can not drop to dragNode's children node. This is a bug of rc-tree. Please report an issue.\");\n      var posArr = posToArr(dropTargetPos);\n      var dropResult = {\n        event: event,\n        node: convertNodePropsToEventData(abstractDropNodeProps),\n        dragNode: _this.dragNode ? convertNodePropsToEventData(_this.dragNode.props) : null,\n        dragNodesKeys: [_this.dragNode.props.eventKey].concat(dragChildrenKeys),\n        dropToGap: dropPosition !== 0,\n        dropPosition: dropPosition + Number(posArr[posArr.length - 1])\n      };\n\n      if (onDrop && !outsideTree) {\n        onDrop(dropResult);\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.cleanDragState = function () {\n      var draggingNodeKey = _this.state.draggingNodeKey;\n\n      if (draggingNodeKey !== null) {\n        _this.setState({\n          draggingNodeKey: null,\n          dropPosition: null,\n          dropContainerKey: null,\n          dropTargetKey: null,\n          dropLevelOffset: null,\n          dropAllowed: true,\n          dragOverNodeKey: null\n        });\n      }\n\n      _this.dragStartMousePosition = null;\n      _this.currentMouseOverDroppableNodeKey = null;\n    };\n\n    _this.onNodeClick = function (e, treeNode) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeDoubleClick = function (e, treeNode) {\n      var onDoubleClick = _this.props.onDoubleClick;\n\n      if (onDoubleClick) {\n        onDoubleClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeSelect = function (e, treeNode) {\n      var selectedKeys = _this.state.selectedKeys;\n      var _this$state5 = _this.state,\n          keyEntities = _this$state5.keyEntities,\n          fieldNames = _this$state5.fieldNames;\n      var _this$props3 = _this.props,\n          onSelect = _this$props3.onSelect,\n          multiple = _this$props3.multiple;\n      var selected = treeNode.selected;\n      var key = treeNode[fieldNames.key];\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, key);\n      } else if (!multiple) {\n        selectedKeys = [key];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, key);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (selectedKey) {\n        var entity = keyEntities[selectedKey];\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n\n      _this.setUncontrolledState({\n        selectedKeys: selectedKeys\n      });\n\n      if (onSelect) {\n        onSelect(selectedKeys, {\n          event: 'select',\n          selected: targetSelected,\n          node: treeNode,\n          selectedNodes: selectedNodes,\n          nativeEvent: e.nativeEvent\n        });\n      }\n    };\n\n    _this.onNodeCheck = function (e, treeNode, checked) {\n      var _this$state6 = _this.state,\n          keyEntities = _this$state6.keyEntities,\n          oriCheckedKeys = _this$state6.checkedKeys,\n          oriHalfCheckedKeys = _this$state6.halfCheckedKeys;\n      var _this$props4 = _this.props,\n          checkStrictly = _this$props4.checkStrictly,\n          onCheck = _this$props4.onCheck;\n      var key = treeNode.key; // Prepare trigger arguments\n\n      var checkedObj;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e.nativeEvent\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, key) : arrDel(oriCheckedKeys, key);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, key);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (checkedKey) {\n          return keyEntities[checkedKey];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: checkedKeys\n        });\n      } else {\n        // Always fill first\n        var _conductCheck = conductCheck([].concat(_toConsumableArray(oriCheckedKeys), [key]), true, keyEntities),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys; // If remove, we do it again to correction\n\n\n        if (!checked) {\n          var keySet = new Set(_checkedKeys);\n          keySet.delete(key);\n\n          var _conductCheck2 = conductCheck(Array.from(keySet), {\n            checked: false,\n            halfCheckedKeys: _halfCheckedKeys\n          }, keyEntities);\n\n          _checkedKeys = _conductCheck2.checkedKeys;\n          _halfCheckedKeys = _conductCheck2.halfCheckedKeys;\n        }\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (checkedKey) {\n          var entity = keyEntities[checkedKey];\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: _checkedKeys\n        }, false, {\n          halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      if (onCheck) {\n        onCheck(checkedObj, eventObj);\n      }\n    };\n\n    _this.onNodeLoad = function (treeNode) {\n      var key = treeNode.key;\n      var loadPromise = new Promise(function (resolve, reject) {\n        // We need to get the latest state of loading/loaded keys\n        _this.setState(function (_ref) {\n          var _ref$loadedKeys = _ref.loadedKeys,\n              loadedKeys = _ref$loadedKeys === void 0 ? [] : _ref$loadedKeys,\n              _ref$loadingKeys = _ref.loadingKeys,\n              loadingKeys = _ref$loadingKeys === void 0 ? [] : _ref$loadingKeys;\n          var _this$props5 = _this.props,\n              loadData = _this$props5.loadData,\n              onLoad = _this$props5.onLoad;\n\n          if (!loadData || loadedKeys.indexOf(key) !== -1 || loadingKeys.indexOf(key) !== -1) {\n            return null;\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var currentLoadedKeys = _this.state.loadedKeys;\n            var newLoadedKeys = arrAdd(currentLoadedKeys, key); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            if (onLoad) {\n              onLoad(newLoadedKeys, {\n                event: 'load',\n                node: treeNode\n              });\n            }\n\n            _this.setUncontrolledState({\n              loadedKeys: newLoadedKeys\n            });\n\n            _this.setState(function (prevState) {\n              return {\n                loadingKeys: arrDel(prevState.loadingKeys, key)\n              };\n            });\n\n            resolve();\n          }).catch(function (e) {\n            _this.setState(function (prevState) {\n              return {\n                loadingKeys: arrDel(prevState.loadingKeys, key)\n              };\n            }); // If exceed max retry times, we give up retry\n\n\n            _this.loadingRetryTimes[key] = (_this.loadingRetryTimes[key] || 0) + 1;\n\n            if (_this.loadingRetryTimes[key] >= MAX_RETRY_TIMES) {\n              var currentLoadedKeys = _this.state.loadedKeys;\n              warning(false, 'Retry for `loadData` many times but still failed. No more retry.');\n\n              _this.setUncontrolledState({\n                loadedKeys: arrAdd(currentLoadedKeys, key)\n              });\n\n              resolve();\n            }\n\n            reject(e);\n          });\n          return {\n            loadingKeys: arrAdd(loadingKeys, key)\n          };\n        });\n      }); // Not care warning if we ignore this\n\n      loadPromise.catch(function () {});\n      return loadPromise;\n    };\n\n    _this.onNodeMouseEnter = function (event, node) {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeMouseLeave = function (event, node) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave) {\n        onMouseLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeContextMenu = function (event, node) {\n      var onRightClick = _this.props.onRightClick;\n\n      if (onRightClick) {\n        event.preventDefault();\n        onRightClick({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onFocus = function () {\n      var onFocus = _this.props.onFocus;\n\n      _this.setState({\n        focused: true\n      });\n\n      if (onFocus) {\n        onFocus.apply(void 0, arguments);\n      }\n    };\n\n    _this.onBlur = function () {\n      var onBlur = _this.props.onBlur;\n\n      _this.setState({\n        focused: false\n      });\n\n      _this.onActiveChange(null);\n\n      if (onBlur) {\n        onBlur.apply(void 0, arguments);\n      }\n    };\n\n    _this.getTreeNodeRequiredProps = function () {\n      var _this$state7 = _this.state,\n          expandedKeys = _this$state7.expandedKeys,\n          selectedKeys = _this$state7.selectedKeys,\n          loadedKeys = _this$state7.loadedKeys,\n          loadingKeys = _this$state7.loadingKeys,\n          checkedKeys = _this$state7.checkedKeys,\n          halfCheckedKeys = _this$state7.halfCheckedKeys,\n          dragOverNodeKey = _this$state7.dragOverNodeKey,\n          dropPosition = _this$state7.dropPosition,\n          keyEntities = _this$state7.keyEntities;\n      return {\n        expandedKeys: expandedKeys || [],\n        selectedKeys: selectedKeys || [],\n        loadedKeys: loadedKeys || [],\n        loadingKeys: loadingKeys || [],\n        checkedKeys: checkedKeys || [],\n        halfCheckedKeys: halfCheckedKeys || [],\n        dragOverNodeKey: dragOverNodeKey,\n        dropPosition: dropPosition,\n        keyEntities: keyEntities\n      };\n    };\n\n    _this.setExpandedKeys = function (expandedKeys) {\n      var _this$state8 = _this.state,\n          treeData = _this$state8.treeData,\n          fieldNames = _this$state8.fieldNames;\n      var flattenNodes = flattenTreeData(treeData, expandedKeys, fieldNames);\n\n      _this.setUncontrolledState({\n        expandedKeys: expandedKeys,\n        flattenNodes: flattenNodes\n      }, true);\n    };\n\n    _this.onNodeExpand = function (e, treeNode) {\n      var expandedKeys = _this.state.expandedKeys;\n      var _this$state9 = _this.state,\n          listChanging = _this$state9.listChanging,\n          fieldNames = _this$state9.fieldNames;\n      var _this$props6 = _this.props,\n          onExpand = _this$props6.onExpand,\n          loadData = _this$props6.loadData;\n      var expanded = treeNode.expanded;\n      var key = treeNode[fieldNames.key]; // Do nothing when motion is in progress\n\n      if (listChanging) {\n        return;\n      } // Update selected keys\n\n\n      var index = expandedKeys.indexOf(key);\n      var targetExpanded = !expanded;\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, key);\n      } else {\n        expandedKeys = arrDel(expandedKeys, key);\n      }\n\n      _this.setExpandedKeys(expandedKeys);\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          node: treeNode,\n          expanded: targetExpanded,\n          nativeEvent: e.nativeEvent\n        });\n      } // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = _this.onNodeLoad(treeNode);\n\n        if (loadPromise) {\n          loadPromise.then(function () {\n            // [Legacy] Refresh logic\n            var newFlattenTreeData = flattenTreeData(_this.state.treeData, expandedKeys, fieldNames);\n\n            _this.setUncontrolledState({\n              flattenNodes: newFlattenTreeData\n            });\n          }).catch(function () {\n            var currentExpandedKeys = _this.state.expandedKeys;\n            var expandedKeysToRestore = arrDel(currentExpandedKeys, key);\n\n            _this.setExpandedKeys(expandedKeysToRestore);\n          });\n        }\n      }\n    };\n\n    _this.onListChangeStart = function () {\n      _this.setUncontrolledState({\n        listChanging: true\n      });\n    };\n\n    _this.onListChangeEnd = function () {\n      setTimeout(function () {\n        _this.setUncontrolledState({\n          listChanging: false\n        });\n      });\n    };\n\n    _this.onActiveChange = function (newActiveKey) {\n      var activeKey = _this.state.activeKey;\n      var onActiveChange = _this.props.onActiveChange;\n\n      if (activeKey === newActiveKey) {\n        return;\n      }\n\n      _this.setState({\n        activeKey: newActiveKey\n      });\n\n      if (newActiveKey !== null) {\n        _this.scrollTo({\n          key: newActiveKey\n        });\n      }\n\n      if (onActiveChange) {\n        onActiveChange(newActiveKey);\n      }\n    };\n\n    _this.getActiveItem = function () {\n      var _this$state10 = _this.state,\n          activeKey = _this$state10.activeKey,\n          flattenNodes = _this$state10.flattenNodes;\n\n      if (activeKey === null) {\n        return null;\n      }\n\n      return flattenNodes.find(function (_ref2) {\n        var key = _ref2.data.key;\n        return key === activeKey;\n      }) || null;\n    };\n\n    _this.offsetActiveKey = function (offset) {\n      var _this$state11 = _this.state,\n          flattenNodes = _this$state11.flattenNodes,\n          activeKey = _this$state11.activeKey;\n      var index = flattenNodes.findIndex(function (_ref3) {\n        var key = _ref3.data.key;\n        return key === activeKey;\n      }); // Align with index\n\n      if (index === -1 && offset < 0) {\n        index = flattenNodes.length;\n      }\n\n      index = (index + offset + flattenNodes.length) % flattenNodes.length;\n      var item = flattenNodes[index];\n\n      if (item) {\n        var key = item.data.key;\n\n        _this.onActiveChange(key);\n      } else {\n        _this.onActiveChange(null);\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var _this$state12 = _this.state,\n          activeKey = _this$state12.activeKey,\n          expandedKeys = _this$state12.expandedKeys,\n          checkedKeys = _this$state12.checkedKeys;\n      var _this$props7 = _this.props,\n          onKeyDown = _this$props7.onKeyDown,\n          checkable = _this$props7.checkable,\n          selectable = _this$props7.selectable; // >>>>>>>>>> Direction\n\n      switch (event.which) {\n        case KeyCode.UP:\n          {\n            _this.offsetActiveKey(-1);\n\n            event.preventDefault();\n            break;\n          }\n\n        case KeyCode.DOWN:\n          {\n            _this.offsetActiveKey(1);\n\n            event.preventDefault();\n            break;\n          }\n      } // >>>>>>>>>> Expand & Selection\n\n\n      var activeItem = _this.getActiveItem();\n\n      if (activeItem && activeItem.data) {\n        var treeNodeRequiredProps = _this.getTreeNodeRequiredProps();\n\n        var expandable = activeItem.data.isLeaf === false || !!(activeItem.data.children || []).length;\n        var eventNode = convertNodePropsToEventData(_objectSpread(_objectSpread({}, getTreeNodeProps(activeKey, treeNodeRequiredProps)), {}, {\n          data: activeItem.data,\n          active: true\n        }));\n\n        switch (event.which) {\n          // >>> Expand\n          case KeyCode.LEFT:\n            {\n              // Collapse if possible\n              if (expandable && expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.parent) {\n                _this.onActiveChange(activeItem.parent.data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              // Expand if possible\n              if (expandable && !expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.children && activeItem.children.length) {\n                _this.onActiveChange(activeItem.children[0].data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n          // Selection\n\n          case KeyCode.ENTER:\n          case KeyCode.SPACE:\n            {\n              if (checkable && !eventNode.disabled && eventNode.checkable !== false && !eventNode.disableCheckbox) {\n                _this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));\n              } else if (!checkable && selectable && !eventNode.disabled && eventNode.selectable !== false) {\n                _this.onNodeSelect({}, eventNode);\n              }\n\n              break;\n            }\n        }\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n    };\n\n    _this.setUncontrolledState = function (state) {\n      var atomic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var forceState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (!_this.destroyed) {\n        var needSync = false;\n        var allPassed = true;\n        var newState = {};\n        Object.keys(state).forEach(function (name) {\n          if (name in _this.props) {\n            allPassed = false;\n            return;\n          }\n\n          needSync = true;\n          newState[name] = state[name];\n        });\n\n        if (needSync && (!atomic || allPassed)) {\n          _this.setState(_objectSpread(_objectSpread({}, newState), forceState));\n        }\n      }\n    };\n\n    _this.scrollTo = function (scroll) {\n      _this.listRef.current.scrollTo(scroll);\n    };\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('dragend', this.onWindowDragEnd);\n      this.destroyed = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$state13 = this.state,\n          focused = _this$state13.focused,\n          flattenNodes = _this$state13.flattenNodes,\n          keyEntities = _this$state13.keyEntities,\n          draggingNodeKey = _this$state13.draggingNodeKey,\n          activeKey = _this$state13.activeKey,\n          dropLevelOffset = _this$state13.dropLevelOffset,\n          dropContainerKey = _this$state13.dropContainerKey,\n          dropTargetKey = _this$state13.dropTargetKey,\n          dropPosition = _this$state13.dropPosition,\n          dragOverNodeKey = _this$state13.dragOverNodeKey,\n          indent = _this$state13.indent;\n      var _this$props8 = this.props,\n          prefixCls = _this$props8.prefixCls,\n          className = _this$props8.className,\n          style = _this$props8.style,\n          showLine = _this$props8.showLine,\n          focusable = _this$props8.focusable,\n          _this$props8$tabIndex = _this$props8.tabIndex,\n          tabIndex = _this$props8$tabIndex === void 0 ? 0 : _this$props8$tabIndex,\n          selectable = _this$props8.selectable,\n          showIcon = _this$props8.showIcon,\n          icon = _this$props8.icon,\n          switcherIcon = _this$props8.switcherIcon,\n          draggable = _this$props8.draggable,\n          checkable = _this$props8.checkable,\n          checkStrictly = _this$props8.checkStrictly,\n          disabled = _this$props8.disabled,\n          motion = _this$props8.motion,\n          loadData = _this$props8.loadData,\n          filterTreeNode = _this$props8.filterTreeNode,\n          height = _this$props8.height,\n          itemHeight = _this$props8.itemHeight,\n          virtual = _this$props8.virtual,\n          titleRender = _this$props8.titleRender,\n          dropIndicatorRender = _this$props8.dropIndicatorRender,\n          onContextMenu = _this$props8.onContextMenu,\n          onScroll = _this$props8.onScroll,\n          direction = _this$props8.direction;\n      var domProps = pickAttrs(this.props, {\n        aria: true,\n        data: true\n      }); // It's better move to hooks but we just simply keep here\n\n      var draggableConfig;\n\n      if (draggable) {\n        if (_typeof(draggable) === 'object') {\n          draggableConfig = draggable;\n        } else if (typeof draggable === 'function') {\n          draggableConfig = {\n            nodeDraggable: draggable\n          };\n        } else {\n          draggableConfig = {};\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(TreeContext.Provider, {\n        value: {\n          prefixCls: prefixCls,\n          selectable: selectable,\n          showIcon: showIcon,\n          icon: icon,\n          switcherIcon: switcherIcon,\n          draggable: draggableConfig,\n          draggingNodeKey: draggingNodeKey,\n          checkable: checkable,\n          checkStrictly: checkStrictly,\n          disabled: disabled,\n          keyEntities: keyEntities,\n          dropLevelOffset: dropLevelOffset,\n          dropContainerKey: dropContainerKey,\n          dropTargetKey: dropTargetKey,\n          dropPosition: dropPosition,\n          dragOverNodeKey: dragOverNodeKey,\n          indent: indent,\n          direction: direction,\n          dropIndicatorRender: dropIndicatorRender,\n          loadData: loadData,\n          filterTreeNode: filterTreeNode,\n          titleRender: titleRender,\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        role: \"tree\",\n        className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-line\"), showLine), _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focused), _defineProperty(_classNames, \"\".concat(prefixCls, \"-active-focused\"), activeKey !== null), _classNames))\n      }, /*#__PURE__*/React.createElement(NodeList, _extends({\n        ref: this.listRef,\n        prefixCls: prefixCls,\n        style: style,\n        data: flattenNodes,\n        disabled: disabled,\n        selectable: selectable,\n        checkable: !!checkable,\n        motion: motion,\n        dragging: draggingNodeKey !== null,\n        height: height,\n        itemHeight: itemHeight,\n        virtual: virtual,\n        focusable: focusable,\n        focused: focused,\n        tabIndex: tabIndex,\n        activeItem: this.getActiveItem(),\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown,\n        onActiveChange: this.onActiveChange,\n        onListChangeStart: this.onListChangeStart,\n        onListChangeEnd: this.onListChangeEnd,\n        onContextMenu: onContextMenu,\n        onScroll: onScroll\n      }, this.getTreeNodeRequiredProps(), domProps))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      function needSync(name) {\n        return !prevProps && name in props || prevProps && prevProps[name] !== props[name];\n      } // ================== Tree Node ==================\n\n\n      var treeData; // fieldNames\n\n      var fieldNames = prevState.fieldNames;\n\n      if (needSync('fieldNames')) {\n        fieldNames = fillFieldNames(props.fieldNames);\n        newState.fieldNames = fieldNames;\n      } // Check if `treeData` or `children` changed and save into the state.\n\n\n      if (needSync('treeData')) {\n        treeData = props.treeData;\n      } else if (needSync('children')) {\n        warning(false, '`children` of Tree is deprecated. Please use `treeData` instead.');\n        treeData = convertTreeToData(props.children);\n      } // Save flatten nodes info and convert `treeData` into keyEntities\n\n\n      if (treeData) {\n        newState.treeData = treeData;\n        var entitiesMap = convertDataToEntities(treeData, {\n          fieldNames: fieldNames\n        });\n        newState.keyEntities = _objectSpread(_defineProperty({}, MOTION_KEY, MotionEntity), entitiesMap.keyEntities); // Warning if treeNode not provide key\n\n        if (process.env.NODE_ENV !== 'production') {\n          warningWithoutKey(treeData, fieldNames);\n        }\n      }\n\n      var keyEntities = newState.keyEntities || prevState.keyEntities; // ================ expandedKeys =================\n\n      if (needSync('expandedKeys') || prevProps && needSync('autoExpandParent')) {\n        newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!prevProps && props.defaultExpandAll) {\n        var cloneKeyEntities = _objectSpread({}, keyEntities);\n\n        delete cloneKeyEntities[MOTION_KEY];\n        newState.expandedKeys = Object.keys(cloneKeyEntities).map(function (key) {\n          return cloneKeyEntities[key].key;\n        });\n      } else if (!prevProps && props.defaultExpandedKeys) {\n        newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      }\n\n      if (!newState.expandedKeys) {\n        delete newState.expandedKeys;\n      } // ================ flattenNodes =================\n\n\n      if (treeData || newState.expandedKeys) {\n        var flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys, fieldNames);\n        newState.flattenNodes = flattenNodes;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!prevProps && props.defaultSelectedKeys) {\n          newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState.checkedKeys,\n            halfCheckedKeys: prevState.halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync('loadedKeys')) {\n        newState.loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Tree;\n}(React.Component);\n\nTree.defaultProps = {\n  prefixCls: 'rc-tree',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  disabled: false,\n  checkStrictly: false,\n  draggable: false,\n  defaultExpandParent: true,\n  autoExpandParent: false,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: [],\n  dropIndicatorRender: DropIndicator,\n  allowDrop: function allowDrop() {\n    return true;\n  }\n};\nTree.TreeNode = TreeNode;\nexport default Tree;","map":{"version":3,"sources":["D:/Documents/School Stuff/Web 3/ASG 2/web3asg2/node_modules/rc-tree/es/Tree.js"],"names":["_extends","_defineProperty","_typeof","_objectSpread","_toConsumableArray","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_createSuper","React","KeyCode","warning","pickAttrs","classNames","TreeContext","getDragChildrenKeys","parseCheckedKeys","conductExpandParent","calcSelectedKeys","calcDropPosition","arrAdd","arrDel","posToArr","flattenTreeData","convertTreeToData","convertDataToEntities","warningWithoutKey","convertNodePropsToEventData","getTreeNodeProps","fillFieldNames","NodeList","MOTION_KEY","MotionEntity","TreeNode","conductCheck","DropIndicator","MAX_RETRY_TIMES","Tree","_React$Component","_super","_this","_len","arguments","length","_args","Array","_key","call","apply","concat","destroyed","delayedDragEnterLogic","loadingRetryTimes","state","keyEntities","indent","selectedKeys","checkedKeys","halfCheckedKeys","loadedKeys","loadingKeys","expandedKeys","draggingNodeKey","dragChildrenKeys","dropTargetKey","dropPosition","dropContainerKey","dropLevelOffset","dropTargetPos","dropAllowed","dragOverNodeKey","treeData","flattenNodes","focused","activeKey","listChanging","prevProps","fieldNames","dragStartMousePosition","dragNode","currentMouseOverDroppableNodeKey","listRef","createRef","onNodeDragStart","event","node","_this$state","onDragStart","props","eventKey","x","clientX","y","clientY","newExpandedKeys","setState","current","getIndentWidth","setExpandedKeys","window","addEventListener","onWindowDragEnd","onNodeDragEnter","_this$state2","_this$props","onDragEnter","onExpand","allowDrop","direction","_node$props","pos","_assertThisInitialize","_calcDropPosition","indexOf","Object","keys","forEach","key","clearTimeout","persist","setTimeout","entity","children","expanded","nativeEvent","onNodeDragOver","_this$state3","_this$props2","onDragOver","_assertThisInitialize2","_calcDropPosition2","onNodeDragLeave","currentTarget","contains","relatedTarget","onDragLeave","onNodeDragEnd","removeEventListener","outsideTree","undefined","onDragEnd","cleanDragState","onNodeDrop","_this$getActiveItem","_this$state4","onDrop","abstractDropNodeProps","getTreeNodeRequiredProps","active","getActiveItem","data","dropToChild","posArr","dropResult","dragNodesKeys","dropToGap","Number","onNodeClick","e","treeNode","onClick","onNodeDoubleClick","onDoubleClick","onNodeSelect","_this$state5","_this$props3","onSelect","multiple","selected","targetSelected","selectedNodes","map","selectedKey","filter","setUncontrolledState","onNodeCheck","checked","_this$state6","oriCheckedKeys","oriHalfCheckedKeys","_this$props4","checkStrictly","onCheck","checkedObj","eventObj","halfChecked","checkedNodes","checkedKey","_conductCheck","_checkedKeys","_halfCheckedKeys","keySet","Set","delete","_conductCheck2","from","checkedNodesPositions","push","onNodeLoad","loadPromise","Promise","resolve","reject","_ref","_ref$loadedKeys","_ref$loadingKeys","_this$props5","loadData","onLoad","promise","then","currentLoadedKeys","newLoadedKeys","prevState","catch","onNodeMouseEnter","onMouseEnter","onNodeMouseLeave","onMouseLeave","onNodeContextMenu","onRightClick","preventDefault","onFocus","onBlur","onActiveChange","_this$state7","_this$state8","onNodeExpand","_this$state9","_this$props6","index","targetExpanded","newFlattenTreeData","currentExpandedKeys","expandedKeysToRestore","onListChangeStart","onListChangeEnd","newActiveKey","scrollTo","_this$state10","find","_ref2","offsetActiveKey","offset","_this$state11","findIndex","_ref3","item","onKeyDown","_this$state12","_this$props7","checkable","selectable","which","UP","DOWN","activeItem","treeNodeRequiredProps","expandable","isLeaf","eventNode","LEFT","includes","parent","RIGHT","ENTER","SPACE","disabled","disableCheckbox","atomic","forceState","needSync","allPassed","newState","name","scroll","value","componentWillUnmount","render","_classNames","_this$state13","_this$props8","prefixCls","className","style","showLine","focusable","_this$props8$tabIndex","tabIndex","showIcon","icon","switcherIcon","draggable","motion","filterTreeNode","height","itemHeight","virtual","titleRender","dropIndicatorRender","onContextMenu","onScroll","domProps","aria","draggableConfig","nodeDraggable","createElement","Provider","role","ref","dragging","getDerivedStateFromProps","entitiesMap","process","env","NODE_ENV","autoExpandParent","defaultExpandParent","defaultExpandAll","cloneKeyEntities","defaultExpandedKeys","defaultSelectedKeys","checkedKeyEntity","defaultCheckedKeys","_checkedKeyEntity","_checkedKeyEntity$che","_checkedKeyEntity$hal","conductKeys","Component","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\n// TODO: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/treeview/treeview-2/treeview-2a.html\n// Fully accessibility support\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport warning from \"rc-util/es/warning\";\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport classNames from 'classnames';\nimport { TreeContext } from './contextTypes';\nimport { getDragChildrenKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr } from './util';\nimport { flattenTreeData, convertTreeToData, convertDataToEntities, warningWithoutKey, convertNodePropsToEventData, getTreeNodeProps, fillFieldNames } from './utils/treeUtil';\nimport NodeList, { MOTION_KEY, MotionEntity } from './NodeList';\nimport TreeNode from './TreeNode';\nimport { conductCheck } from './utils/conductUtil';\nimport DropIndicator from './DropIndicator';\nvar MAX_RETRY_TIMES = 10;\n\nvar Tree = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  var _super = _createSuper(Tree);\n\n  function Tree() {\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n    _this.destroyed = false;\n    _this.delayedDragEnterLogic = void 0;\n    _this.loadingRetryTimes = {};\n    _this.state = {\n      keyEntities: {},\n      indent: null,\n      selectedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      loadedKeys: [],\n      loadingKeys: [],\n      expandedKeys: [],\n      draggingNodeKey: null,\n      dragChildrenKeys: [],\n      // dropTargetKey is the key of abstract-drop-node\n      // the abstract-drop-node is the real drop node when drag and drop\n      // not the DOM drag over node\n      dropTargetKey: null,\n      dropPosition: null,\n      dropContainerKey: null,\n      dropLevelOffset: null,\n      dropTargetPos: null,\n      dropAllowed: true,\n      // the abstract-drag-over-node\n      // if mouse is on the bottom of top dom node or no the top of the bottom dom node\n      // abstract-drag-over-node is the top node\n      dragOverNodeKey: null,\n      treeData: [],\n      flattenNodes: [],\n      focused: false,\n      activeKey: null,\n      listChanging: false,\n      prevProps: null,\n      fieldNames: fillFieldNames()\n    };\n    _this.dragStartMousePosition = null;\n    _this.dragNode = void 0;\n    _this.currentMouseOverDroppableNodeKey = null;\n    _this.listRef = /*#__PURE__*/React.createRef();\n\n    _this.onNodeDragStart = function (event, node) {\n      var _this$state = _this.state,\n          expandedKeys = _this$state.expandedKeys,\n          keyEntities = _this$state.keyEntities;\n      var onDragStart = _this.props.onDragStart;\n      var eventKey = node.props.eventKey;\n      _this.dragNode = node;\n      _this.dragStartMousePosition = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      var newExpandedKeys = arrDel(expandedKeys, eventKey);\n\n      _this.setState({\n        draggingNodeKey: eventKey,\n        dragChildrenKeys: getDragChildrenKeys(eventKey, keyEntities),\n        indent: _this.listRef.current.getIndentWidth()\n      });\n\n      _this.setExpandedKeys(newExpandedKeys);\n\n      window.addEventListener('dragend', _this.onWindowDragEnd);\n\n      if (onDragStart) {\n        onDragStart({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragEnter = function (event, node) {\n      var _this$state2 = _this.state,\n          expandedKeys = _this$state2.expandedKeys,\n          keyEntities = _this$state2.keyEntities,\n          dragChildrenKeys = _this$state2.dragChildrenKeys,\n          flattenNodes = _this$state2.flattenNodes,\n          indent = _this$state2.indent;\n      var _this$props = _this.props,\n          onDragEnter = _this$props.onDragEnter,\n          onExpand = _this$props.onExpand,\n          allowDrop = _this$props.allowDrop,\n          direction = _this$props.direction;\n      var _node$props = node.props,\n          pos = _node$props.pos,\n          eventKey = _node$props.eventKey;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          dragNode = _assertThisInitialize.dragNode; // record the key of node which is latest entered, used in dragleave event.\n\n\n      if (_this.currentMouseOverDroppableNodeKey !== eventKey) {\n        _this.currentMouseOverDroppableNodeKey = eventKey;\n      }\n\n      var _calcDropPosition = calcDropPosition(event, dragNode, node, indent, _this.dragStartMousePosition, allowDrop, flattenNodes, keyEntities, expandedKeys, direction),\n          dropPosition = _calcDropPosition.dropPosition,\n          dropLevelOffset = _calcDropPosition.dropLevelOffset,\n          dropTargetKey = _calcDropPosition.dropTargetKey,\n          dropContainerKey = _calcDropPosition.dropContainerKey,\n          dropTargetPos = _calcDropPosition.dropTargetPos,\n          dropAllowed = _calcDropPosition.dropAllowed,\n          dragOverNodeKey = _calcDropPosition.dragOverNodeKey;\n\n      if (!dragNode || // don't allow drop inside its children\n      dragChildrenKeys.indexOf(dropTargetKey) !== -1 || // don't allow drop when drop is not allowed caculated by calcDropPosition\n      !dropAllowed) {\n        _this.setState({\n          dragOverNodeKey: null,\n          dropPosition: null,\n          dropLevelOffset: null,\n          dropTargetKey: null,\n          dropContainerKey: null,\n          dropTargetPos: null,\n          dropAllowed: false\n        });\n\n        return;\n      } // Side effect for delay drag\n\n\n      if (!_this.delayedDragEnterLogic) {\n        _this.delayedDragEnterLogic = {};\n      }\n\n      Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n        clearTimeout(_this.delayedDragEnterLogic[key]);\n      });\n\n      if (dragNode.props.eventKey !== node.props.eventKey) {\n        // hoist expand logic here\n        // since if logic is on the bottom\n        // it will be blocked by abstract dragover node check\n        //   => if you dragenter from top, you mouse will still be consider as in the top node\n        event.persist();\n        _this.delayedDragEnterLogic[pos] = window.setTimeout(function () {\n          if (_this.state.draggingNodeKey === null) return;\n\n          var newExpandedKeys = _toConsumableArray(expandedKeys);\n\n          var entity = keyEntities[node.props.eventKey];\n\n          if (entity && (entity.children || []).length) {\n            newExpandedKeys = arrAdd(expandedKeys, node.props.eventKey);\n          }\n\n          if (!('expandedKeys' in _this.props)) {\n            _this.setExpandedKeys(newExpandedKeys);\n          }\n\n          if (onExpand) {\n            onExpand(newExpandedKeys, {\n              node: convertNodePropsToEventData(node.props),\n              expanded: true,\n              nativeEvent: event.nativeEvent\n            });\n          }\n        }, 800);\n      } // Skip if drag node is self\n\n\n      if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {\n        _this.setState({\n          dragOverNodeKey: null,\n          dropPosition: null,\n          dropLevelOffset: null,\n          dropTargetKey: null,\n          dropContainerKey: null,\n          dropTargetPos: null,\n          dropAllowed: false\n        });\n\n        return;\n      } // Update drag over node and drag state\n\n\n      _this.setState({\n        dragOverNodeKey: dragOverNodeKey,\n        dropPosition: dropPosition,\n        dropLevelOffset: dropLevelOffset,\n        dropTargetKey: dropTargetKey,\n        dropContainerKey: dropContainerKey,\n        dropTargetPos: dropTargetPos,\n        dropAllowed: dropAllowed\n      });\n\n      if (onDragEnter) {\n        onDragEnter({\n          event: event,\n          node: convertNodePropsToEventData(node.props),\n          expandedKeys: expandedKeys\n        });\n      }\n    };\n\n    _this.onNodeDragOver = function (event, node) {\n      var _this$state3 = _this.state,\n          dragChildrenKeys = _this$state3.dragChildrenKeys,\n          flattenNodes = _this$state3.flattenNodes,\n          keyEntities = _this$state3.keyEntities,\n          expandedKeys = _this$state3.expandedKeys,\n          indent = _this$state3.indent;\n      var _this$props2 = _this.props,\n          onDragOver = _this$props2.onDragOver,\n          allowDrop = _this$props2.allowDrop,\n          direction = _this$props2.direction;\n\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n          dragNode = _assertThisInitialize2.dragNode;\n\n      var _calcDropPosition2 = calcDropPosition(event, dragNode, node, indent, _this.dragStartMousePosition, allowDrop, flattenNodes, keyEntities, expandedKeys, direction),\n          dropPosition = _calcDropPosition2.dropPosition,\n          dropLevelOffset = _calcDropPosition2.dropLevelOffset,\n          dropTargetKey = _calcDropPosition2.dropTargetKey,\n          dropContainerKey = _calcDropPosition2.dropContainerKey,\n          dropAllowed = _calcDropPosition2.dropAllowed,\n          dropTargetPos = _calcDropPosition2.dropTargetPos,\n          dragOverNodeKey = _calcDropPosition2.dragOverNodeKey;\n\n      if (!dragNode || dragChildrenKeys.indexOf(dropTargetKey) !== -1 || !dropAllowed) {\n        // don't allow drop inside its children\n        // don't allow drop when drop is not allowed caculated by calcDropPosition\n        return;\n      } // Update drag position\n\n\n      if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {\n        if (!(_this.state.dropPosition === null && _this.state.dropLevelOffset === null && _this.state.dropTargetKey === null && _this.state.dropContainerKey === null && _this.state.dropTargetPos === null && _this.state.dropAllowed === false && _this.state.dragOverNodeKey === null)) {\n          _this.setState({\n            dropPosition: null,\n            dropLevelOffset: null,\n            dropTargetKey: null,\n            dropContainerKey: null,\n            dropTargetPos: null,\n            dropAllowed: false,\n            dragOverNodeKey: null\n          });\n        }\n      } else if (!(dropPosition === _this.state.dropPosition && dropLevelOffset === _this.state.dropLevelOffset && dropTargetKey === _this.state.dropTargetKey && dropContainerKey === _this.state.dropContainerKey && dropTargetPos === _this.state.dropTargetPos && dropAllowed === _this.state.dropAllowed && dragOverNodeKey === _this.state.dragOverNodeKey)) {\n        _this.setState({\n          dropPosition: dropPosition,\n          dropLevelOffset: dropLevelOffset,\n          dropTargetKey: dropTargetKey,\n          dropContainerKey: dropContainerKey,\n          dropTargetPos: dropTargetPos,\n          dropAllowed: dropAllowed,\n          dragOverNodeKey: dragOverNodeKey\n        });\n      }\n\n      if (onDragOver) {\n        onDragOver({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragLeave = function (event, node) {\n      // if it is outside the droppable area\n      // currentMouseOverDroppableNodeKey will be updated in dragenter event when into another droppable receiver.\n      if (_this.currentMouseOverDroppableNodeKey === node.props.eventKey && !event.currentTarget.contains(event.relatedTarget)) {\n        _this.setState({\n          dropPosition: null,\n          dropLevelOffset: null,\n          dropTargetKey: null,\n          dropContainerKey: null,\n          dropTargetPos: null,\n          dropAllowed: false,\n          dragOverNodeKey: null\n        });\n\n        _this.currentMouseOverDroppableNodeKey = null;\n      }\n\n      var onDragLeave = _this.props.onDragLeave;\n\n      if (onDragLeave) {\n        onDragLeave({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onWindowDragEnd = function (event) {\n      _this.onNodeDragEnd(event, null, true);\n\n      window.removeEventListener('dragend', _this.onWindowDragEnd);\n    };\n\n    _this.onNodeDragEnd = function (event, node) {\n      var outsideTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var onDragEnd = _this.props.onDragEnd;\n\n      _this.setState({\n        dragOverNodeKey: null\n      });\n\n      _this.cleanDragState();\n\n      if (onDragEnd && !outsideTree) {\n        onDragEnd({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeDrop = function (event, node) {\n      var _this$getActiveItem;\n\n      var outsideTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var _this$state4 = _this.state,\n          dragChildrenKeys = _this$state4.dragChildrenKeys,\n          dropPosition = _this$state4.dropPosition,\n          dropTargetKey = _this$state4.dropTargetKey,\n          dropTargetPos = _this$state4.dropTargetPos,\n          dropAllowed = _this$state4.dropAllowed;\n      if (!dropAllowed) return;\n      var onDrop = _this.props.onDrop;\n\n      _this.setState({\n        dragOverNodeKey: null\n      });\n\n      _this.cleanDragState();\n\n      if (dropTargetKey === null) return;\n\n      var abstractDropNodeProps = _objectSpread(_objectSpread({}, getTreeNodeProps(dropTargetKey, _this.getTreeNodeRequiredProps())), {}, {\n        active: ((_this$getActiveItem = _this.getActiveItem()) === null || _this$getActiveItem === void 0 ? void 0 : _this$getActiveItem.data.key) === dropTargetKey,\n        data: _this.state.keyEntities[dropTargetKey].node\n      });\n\n      var dropToChild = dragChildrenKeys.indexOf(dropTargetKey) !== -1;\n      warning(!dropToChild, \"Can not drop to dragNode's children node. This is a bug of rc-tree. Please report an issue.\");\n      var posArr = posToArr(dropTargetPos);\n      var dropResult = {\n        event: event,\n        node: convertNodePropsToEventData(abstractDropNodeProps),\n        dragNode: _this.dragNode ? convertNodePropsToEventData(_this.dragNode.props) : null,\n        dragNodesKeys: [_this.dragNode.props.eventKey].concat(dragChildrenKeys),\n        dropToGap: dropPosition !== 0,\n        dropPosition: dropPosition + Number(posArr[posArr.length - 1])\n      };\n\n      if (onDrop && !outsideTree) {\n        onDrop(dropResult);\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.cleanDragState = function () {\n      var draggingNodeKey = _this.state.draggingNodeKey;\n\n      if (draggingNodeKey !== null) {\n        _this.setState({\n          draggingNodeKey: null,\n          dropPosition: null,\n          dropContainerKey: null,\n          dropTargetKey: null,\n          dropLevelOffset: null,\n          dropAllowed: true,\n          dragOverNodeKey: null\n        });\n      }\n\n      _this.dragStartMousePosition = null;\n      _this.currentMouseOverDroppableNodeKey = null;\n    };\n\n    _this.onNodeClick = function (e, treeNode) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeDoubleClick = function (e, treeNode) {\n      var onDoubleClick = _this.props.onDoubleClick;\n\n      if (onDoubleClick) {\n        onDoubleClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeSelect = function (e, treeNode) {\n      var selectedKeys = _this.state.selectedKeys;\n      var _this$state5 = _this.state,\n          keyEntities = _this$state5.keyEntities,\n          fieldNames = _this$state5.fieldNames;\n      var _this$props3 = _this.props,\n          onSelect = _this$props3.onSelect,\n          multiple = _this$props3.multiple;\n      var selected = treeNode.selected;\n      var key = treeNode[fieldNames.key];\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, key);\n      } else if (!multiple) {\n        selectedKeys = [key];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, key);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (selectedKey) {\n        var entity = keyEntities[selectedKey];\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n\n      _this.setUncontrolledState({\n        selectedKeys: selectedKeys\n      });\n\n      if (onSelect) {\n        onSelect(selectedKeys, {\n          event: 'select',\n          selected: targetSelected,\n          node: treeNode,\n          selectedNodes: selectedNodes,\n          nativeEvent: e.nativeEvent\n        });\n      }\n    };\n\n    _this.onNodeCheck = function (e, treeNode, checked) {\n      var _this$state6 = _this.state,\n          keyEntities = _this$state6.keyEntities,\n          oriCheckedKeys = _this$state6.checkedKeys,\n          oriHalfCheckedKeys = _this$state6.halfCheckedKeys;\n      var _this$props4 = _this.props,\n          checkStrictly = _this$props4.checkStrictly,\n          onCheck = _this$props4.onCheck;\n      var key = treeNode.key; // Prepare trigger arguments\n\n      var checkedObj;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e.nativeEvent\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, key) : arrDel(oriCheckedKeys, key);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, key);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (checkedKey) {\n          return keyEntities[checkedKey];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: checkedKeys\n        });\n      } else {\n        // Always fill first\n        var _conductCheck = conductCheck([].concat(_toConsumableArray(oriCheckedKeys), [key]), true, keyEntities),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys; // If remove, we do it again to correction\n\n\n        if (!checked) {\n          var keySet = new Set(_checkedKeys);\n          keySet.delete(key);\n\n          var _conductCheck2 = conductCheck(Array.from(keySet), {\n            checked: false,\n            halfCheckedKeys: _halfCheckedKeys\n          }, keyEntities);\n\n          _checkedKeys = _conductCheck2.checkedKeys;\n          _halfCheckedKeys = _conductCheck2.halfCheckedKeys;\n        }\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (checkedKey) {\n          var entity = keyEntities[checkedKey];\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: _checkedKeys\n        }, false, {\n          halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      if (onCheck) {\n        onCheck(checkedObj, eventObj);\n      }\n    };\n\n    _this.onNodeLoad = function (treeNode) {\n      var key = treeNode.key;\n      var loadPromise = new Promise(function (resolve, reject) {\n        // We need to get the latest state of loading/loaded keys\n        _this.setState(function (_ref) {\n          var _ref$loadedKeys = _ref.loadedKeys,\n              loadedKeys = _ref$loadedKeys === void 0 ? [] : _ref$loadedKeys,\n              _ref$loadingKeys = _ref.loadingKeys,\n              loadingKeys = _ref$loadingKeys === void 0 ? [] : _ref$loadingKeys;\n          var _this$props5 = _this.props,\n              loadData = _this$props5.loadData,\n              onLoad = _this$props5.onLoad;\n\n          if (!loadData || loadedKeys.indexOf(key) !== -1 || loadingKeys.indexOf(key) !== -1) {\n            return null;\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var currentLoadedKeys = _this.state.loadedKeys;\n            var newLoadedKeys = arrAdd(currentLoadedKeys, key); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            if (onLoad) {\n              onLoad(newLoadedKeys, {\n                event: 'load',\n                node: treeNode\n              });\n            }\n\n            _this.setUncontrolledState({\n              loadedKeys: newLoadedKeys\n            });\n\n            _this.setState(function (prevState) {\n              return {\n                loadingKeys: arrDel(prevState.loadingKeys, key)\n              };\n            });\n\n            resolve();\n          }).catch(function (e) {\n            _this.setState(function (prevState) {\n              return {\n                loadingKeys: arrDel(prevState.loadingKeys, key)\n              };\n            }); // If exceed max retry times, we give up retry\n\n\n            _this.loadingRetryTimes[key] = (_this.loadingRetryTimes[key] || 0) + 1;\n\n            if (_this.loadingRetryTimes[key] >= MAX_RETRY_TIMES) {\n              var currentLoadedKeys = _this.state.loadedKeys;\n              warning(false, 'Retry for `loadData` many times but still failed. No more retry.');\n\n              _this.setUncontrolledState({\n                loadedKeys: arrAdd(currentLoadedKeys, key)\n              });\n\n              resolve();\n            }\n\n            reject(e);\n          });\n          return {\n            loadingKeys: arrAdd(loadingKeys, key)\n          };\n        });\n      }); // Not care warning if we ignore this\n\n      loadPromise.catch(function () {});\n      return loadPromise;\n    };\n\n    _this.onNodeMouseEnter = function (event, node) {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeMouseLeave = function (event, node) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave) {\n        onMouseLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeContextMenu = function (event, node) {\n      var onRightClick = _this.props.onRightClick;\n\n      if (onRightClick) {\n        event.preventDefault();\n        onRightClick({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onFocus = function () {\n      var onFocus = _this.props.onFocus;\n\n      _this.setState({\n        focused: true\n      });\n\n      if (onFocus) {\n        onFocus.apply(void 0, arguments);\n      }\n    };\n\n    _this.onBlur = function () {\n      var onBlur = _this.props.onBlur;\n\n      _this.setState({\n        focused: false\n      });\n\n      _this.onActiveChange(null);\n\n      if (onBlur) {\n        onBlur.apply(void 0, arguments);\n      }\n    };\n\n    _this.getTreeNodeRequiredProps = function () {\n      var _this$state7 = _this.state,\n          expandedKeys = _this$state7.expandedKeys,\n          selectedKeys = _this$state7.selectedKeys,\n          loadedKeys = _this$state7.loadedKeys,\n          loadingKeys = _this$state7.loadingKeys,\n          checkedKeys = _this$state7.checkedKeys,\n          halfCheckedKeys = _this$state7.halfCheckedKeys,\n          dragOverNodeKey = _this$state7.dragOverNodeKey,\n          dropPosition = _this$state7.dropPosition,\n          keyEntities = _this$state7.keyEntities;\n      return {\n        expandedKeys: expandedKeys || [],\n        selectedKeys: selectedKeys || [],\n        loadedKeys: loadedKeys || [],\n        loadingKeys: loadingKeys || [],\n        checkedKeys: checkedKeys || [],\n        halfCheckedKeys: halfCheckedKeys || [],\n        dragOverNodeKey: dragOverNodeKey,\n        dropPosition: dropPosition,\n        keyEntities: keyEntities\n      };\n    };\n\n    _this.setExpandedKeys = function (expandedKeys) {\n      var _this$state8 = _this.state,\n          treeData = _this$state8.treeData,\n          fieldNames = _this$state8.fieldNames;\n      var flattenNodes = flattenTreeData(treeData, expandedKeys, fieldNames);\n\n      _this.setUncontrolledState({\n        expandedKeys: expandedKeys,\n        flattenNodes: flattenNodes\n      }, true);\n    };\n\n    _this.onNodeExpand = function (e, treeNode) {\n      var expandedKeys = _this.state.expandedKeys;\n      var _this$state9 = _this.state,\n          listChanging = _this$state9.listChanging,\n          fieldNames = _this$state9.fieldNames;\n      var _this$props6 = _this.props,\n          onExpand = _this$props6.onExpand,\n          loadData = _this$props6.loadData;\n      var expanded = treeNode.expanded;\n      var key = treeNode[fieldNames.key]; // Do nothing when motion is in progress\n\n      if (listChanging) {\n        return;\n      } // Update selected keys\n\n\n      var index = expandedKeys.indexOf(key);\n      var targetExpanded = !expanded;\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, key);\n      } else {\n        expandedKeys = arrDel(expandedKeys, key);\n      }\n\n      _this.setExpandedKeys(expandedKeys);\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          node: treeNode,\n          expanded: targetExpanded,\n          nativeEvent: e.nativeEvent\n        });\n      } // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = _this.onNodeLoad(treeNode);\n\n        if (loadPromise) {\n          loadPromise.then(function () {\n            // [Legacy] Refresh logic\n            var newFlattenTreeData = flattenTreeData(_this.state.treeData, expandedKeys, fieldNames);\n\n            _this.setUncontrolledState({\n              flattenNodes: newFlattenTreeData\n            });\n          }).catch(function () {\n            var currentExpandedKeys = _this.state.expandedKeys;\n            var expandedKeysToRestore = arrDel(currentExpandedKeys, key);\n\n            _this.setExpandedKeys(expandedKeysToRestore);\n          });\n        }\n      }\n    };\n\n    _this.onListChangeStart = function () {\n      _this.setUncontrolledState({\n        listChanging: true\n      });\n    };\n\n    _this.onListChangeEnd = function () {\n      setTimeout(function () {\n        _this.setUncontrolledState({\n          listChanging: false\n        });\n      });\n    };\n\n    _this.onActiveChange = function (newActiveKey) {\n      var activeKey = _this.state.activeKey;\n      var onActiveChange = _this.props.onActiveChange;\n\n      if (activeKey === newActiveKey) {\n        return;\n      }\n\n      _this.setState({\n        activeKey: newActiveKey\n      });\n\n      if (newActiveKey !== null) {\n        _this.scrollTo({\n          key: newActiveKey\n        });\n      }\n\n      if (onActiveChange) {\n        onActiveChange(newActiveKey);\n      }\n    };\n\n    _this.getActiveItem = function () {\n      var _this$state10 = _this.state,\n          activeKey = _this$state10.activeKey,\n          flattenNodes = _this$state10.flattenNodes;\n\n      if (activeKey === null) {\n        return null;\n      }\n\n      return flattenNodes.find(function (_ref2) {\n        var key = _ref2.data.key;\n        return key === activeKey;\n      }) || null;\n    };\n\n    _this.offsetActiveKey = function (offset) {\n      var _this$state11 = _this.state,\n          flattenNodes = _this$state11.flattenNodes,\n          activeKey = _this$state11.activeKey;\n      var index = flattenNodes.findIndex(function (_ref3) {\n        var key = _ref3.data.key;\n        return key === activeKey;\n      }); // Align with index\n\n      if (index === -1 && offset < 0) {\n        index = flattenNodes.length;\n      }\n\n      index = (index + offset + flattenNodes.length) % flattenNodes.length;\n      var item = flattenNodes[index];\n\n      if (item) {\n        var key = item.data.key;\n\n        _this.onActiveChange(key);\n      } else {\n        _this.onActiveChange(null);\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var _this$state12 = _this.state,\n          activeKey = _this$state12.activeKey,\n          expandedKeys = _this$state12.expandedKeys,\n          checkedKeys = _this$state12.checkedKeys;\n      var _this$props7 = _this.props,\n          onKeyDown = _this$props7.onKeyDown,\n          checkable = _this$props7.checkable,\n          selectable = _this$props7.selectable; // >>>>>>>>>> Direction\n\n      switch (event.which) {\n        case KeyCode.UP:\n          {\n            _this.offsetActiveKey(-1);\n\n            event.preventDefault();\n            break;\n          }\n\n        case KeyCode.DOWN:\n          {\n            _this.offsetActiveKey(1);\n\n            event.preventDefault();\n            break;\n          }\n      } // >>>>>>>>>> Expand & Selection\n\n\n      var activeItem = _this.getActiveItem();\n\n      if (activeItem && activeItem.data) {\n        var treeNodeRequiredProps = _this.getTreeNodeRequiredProps();\n\n        var expandable = activeItem.data.isLeaf === false || !!(activeItem.data.children || []).length;\n        var eventNode = convertNodePropsToEventData(_objectSpread(_objectSpread({}, getTreeNodeProps(activeKey, treeNodeRequiredProps)), {}, {\n          data: activeItem.data,\n          active: true\n        }));\n\n        switch (event.which) {\n          // >>> Expand\n          case KeyCode.LEFT:\n            {\n              // Collapse if possible\n              if (expandable && expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.parent) {\n                _this.onActiveChange(activeItem.parent.data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              // Expand if possible\n              if (expandable && !expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.children && activeItem.children.length) {\n                _this.onActiveChange(activeItem.children[0].data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n          // Selection\n\n          case KeyCode.ENTER:\n          case KeyCode.SPACE:\n            {\n              if (checkable && !eventNode.disabled && eventNode.checkable !== false && !eventNode.disableCheckbox) {\n                _this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));\n              } else if (!checkable && selectable && !eventNode.disabled && eventNode.selectable !== false) {\n                _this.onNodeSelect({}, eventNode);\n              }\n\n              break;\n            }\n        }\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n    };\n\n    _this.setUncontrolledState = function (state) {\n      var atomic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var forceState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (!_this.destroyed) {\n        var needSync = false;\n        var allPassed = true;\n        var newState = {};\n        Object.keys(state).forEach(function (name) {\n          if (name in _this.props) {\n            allPassed = false;\n            return;\n          }\n\n          needSync = true;\n          newState[name] = state[name];\n        });\n\n        if (needSync && (!atomic || allPassed)) {\n          _this.setState(_objectSpread(_objectSpread({}, newState), forceState));\n        }\n      }\n    };\n\n    _this.scrollTo = function (scroll) {\n      _this.listRef.current.scrollTo(scroll);\n    };\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('dragend', this.onWindowDragEnd);\n      this.destroyed = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$state13 = this.state,\n          focused = _this$state13.focused,\n          flattenNodes = _this$state13.flattenNodes,\n          keyEntities = _this$state13.keyEntities,\n          draggingNodeKey = _this$state13.draggingNodeKey,\n          activeKey = _this$state13.activeKey,\n          dropLevelOffset = _this$state13.dropLevelOffset,\n          dropContainerKey = _this$state13.dropContainerKey,\n          dropTargetKey = _this$state13.dropTargetKey,\n          dropPosition = _this$state13.dropPosition,\n          dragOverNodeKey = _this$state13.dragOverNodeKey,\n          indent = _this$state13.indent;\n      var _this$props8 = this.props,\n          prefixCls = _this$props8.prefixCls,\n          className = _this$props8.className,\n          style = _this$props8.style,\n          showLine = _this$props8.showLine,\n          focusable = _this$props8.focusable,\n          _this$props8$tabIndex = _this$props8.tabIndex,\n          tabIndex = _this$props8$tabIndex === void 0 ? 0 : _this$props8$tabIndex,\n          selectable = _this$props8.selectable,\n          showIcon = _this$props8.showIcon,\n          icon = _this$props8.icon,\n          switcherIcon = _this$props8.switcherIcon,\n          draggable = _this$props8.draggable,\n          checkable = _this$props8.checkable,\n          checkStrictly = _this$props8.checkStrictly,\n          disabled = _this$props8.disabled,\n          motion = _this$props8.motion,\n          loadData = _this$props8.loadData,\n          filterTreeNode = _this$props8.filterTreeNode,\n          height = _this$props8.height,\n          itemHeight = _this$props8.itemHeight,\n          virtual = _this$props8.virtual,\n          titleRender = _this$props8.titleRender,\n          dropIndicatorRender = _this$props8.dropIndicatorRender,\n          onContextMenu = _this$props8.onContextMenu,\n          onScroll = _this$props8.onScroll,\n          direction = _this$props8.direction;\n      var domProps = pickAttrs(this.props, {\n        aria: true,\n        data: true\n      }); // It's better move to hooks but we just simply keep here\n\n      var draggableConfig;\n\n      if (draggable) {\n        if (_typeof(draggable) === 'object') {\n          draggableConfig = draggable;\n        } else if (typeof draggable === 'function') {\n          draggableConfig = {\n            nodeDraggable: draggable\n          };\n        } else {\n          draggableConfig = {};\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(TreeContext.Provider, {\n        value: {\n          prefixCls: prefixCls,\n          selectable: selectable,\n          showIcon: showIcon,\n          icon: icon,\n          switcherIcon: switcherIcon,\n          draggable: draggableConfig,\n          draggingNodeKey: draggingNodeKey,\n          checkable: checkable,\n          checkStrictly: checkStrictly,\n          disabled: disabled,\n          keyEntities: keyEntities,\n          dropLevelOffset: dropLevelOffset,\n          dropContainerKey: dropContainerKey,\n          dropTargetKey: dropTargetKey,\n          dropPosition: dropPosition,\n          dragOverNodeKey: dragOverNodeKey,\n          indent: indent,\n          direction: direction,\n          dropIndicatorRender: dropIndicatorRender,\n          loadData: loadData,\n          filterTreeNode: filterTreeNode,\n          titleRender: titleRender,\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        role: \"tree\",\n        className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-line\"), showLine), _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focused), _defineProperty(_classNames, \"\".concat(prefixCls, \"-active-focused\"), activeKey !== null), _classNames))\n      }, /*#__PURE__*/React.createElement(NodeList, _extends({\n        ref: this.listRef,\n        prefixCls: prefixCls,\n        style: style,\n        data: flattenNodes,\n        disabled: disabled,\n        selectable: selectable,\n        checkable: !!checkable,\n        motion: motion,\n        dragging: draggingNodeKey !== null,\n        height: height,\n        itemHeight: itemHeight,\n        virtual: virtual,\n        focusable: focusable,\n        focused: focused,\n        tabIndex: tabIndex,\n        activeItem: this.getActiveItem(),\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown,\n        onActiveChange: this.onActiveChange,\n        onListChangeStart: this.onListChangeStart,\n        onListChangeEnd: this.onListChangeEnd,\n        onContextMenu: onContextMenu,\n        onScroll: onScroll\n      }, this.getTreeNodeRequiredProps(), domProps))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      function needSync(name) {\n        return !prevProps && name in props || prevProps && prevProps[name] !== props[name];\n      } // ================== Tree Node ==================\n\n\n      var treeData; // fieldNames\n\n      var fieldNames = prevState.fieldNames;\n\n      if (needSync('fieldNames')) {\n        fieldNames = fillFieldNames(props.fieldNames);\n        newState.fieldNames = fieldNames;\n      } // Check if `treeData` or `children` changed and save into the state.\n\n\n      if (needSync('treeData')) {\n        treeData = props.treeData;\n      } else if (needSync('children')) {\n        warning(false, '`children` of Tree is deprecated. Please use `treeData` instead.');\n        treeData = convertTreeToData(props.children);\n      } // Save flatten nodes info and convert `treeData` into keyEntities\n\n\n      if (treeData) {\n        newState.treeData = treeData;\n        var entitiesMap = convertDataToEntities(treeData, {\n          fieldNames: fieldNames\n        });\n        newState.keyEntities = _objectSpread(_defineProperty({}, MOTION_KEY, MotionEntity), entitiesMap.keyEntities); // Warning if treeNode not provide key\n\n        if (process.env.NODE_ENV !== 'production') {\n          warningWithoutKey(treeData, fieldNames);\n        }\n      }\n\n      var keyEntities = newState.keyEntities || prevState.keyEntities; // ================ expandedKeys =================\n\n      if (needSync('expandedKeys') || prevProps && needSync('autoExpandParent')) {\n        newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!prevProps && props.defaultExpandAll) {\n        var cloneKeyEntities = _objectSpread({}, keyEntities);\n\n        delete cloneKeyEntities[MOTION_KEY];\n        newState.expandedKeys = Object.keys(cloneKeyEntities).map(function (key) {\n          return cloneKeyEntities[key].key;\n        });\n      } else if (!prevProps && props.defaultExpandedKeys) {\n        newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      }\n\n      if (!newState.expandedKeys) {\n        delete newState.expandedKeys;\n      } // ================ flattenNodes =================\n\n\n      if (treeData || newState.expandedKeys) {\n        var flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys, fieldNames);\n        newState.flattenNodes = flattenNodes;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!prevProps && props.defaultSelectedKeys) {\n          newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState.checkedKeys,\n            halfCheckedKeys: prevState.halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync('loadedKeys')) {\n        newState.loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Tree;\n}(React.Component);\n\nTree.defaultProps = {\n  prefixCls: 'rc-tree',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  disabled: false,\n  checkStrictly: false,\n  draggable: false,\n  defaultExpandParent: true,\n  autoExpandParent: false,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: [],\n  dropIndicatorRender: DropIndicator,\n  allowDrop: function allowDrop() {\n    return true;\n  }\n};\nTree.TreeNode = TreeNode;\nexport default Tree;"]},"metadata":{},"sourceType":"module"}